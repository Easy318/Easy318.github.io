<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Superli&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.superli.tech/"/>
  <updated>2019-01-07T08:47:37.901Z</updated>
  <id>http://www.superli.tech/</id>
  
  <author>
    <name>李超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vscode上Python环境的配置和使用</title>
    <link href="http://www.superli.tech/Vscode%E4%B8%8APython%E7%8E%AF%E5%A2%83%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.superli.tech/Vscode上Python环境的配置和使用/</id>
    <published>2019-01-07T08:01:34.000Z</published>
    <updated>2019-01-07T08:47:37.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着博主越来越频繁的使用Vscode做Python开发,发现这玩意儿是越来越顺手(微软大法牛啤),有的细节很实用,但是时间久了就容易忘了,故在此做个整理,而且会不断更新…</p><h2 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h2><p>powershell的授权:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 以管理员身份打开powershell</span><br><span class="line"><span class="meta">#</span> 执行下面命令</span><br><span class="line">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure><p>Vscode用户配置:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment"># Terminal: Select Default Shell</span></span><br><span class="line">    <span class="string">"terminal.integrated.shell.windows"</span>: <span class="string">"C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span>,</span><br><span class="line">    <span class="comment"># File Icon Theme</span></span><br><span class="line">    <span class="string">"workbench.iconTheme"</span>: <span class="string">"vscode-icons"</span>,</span><br><span class="line">    <span class="comment"># Python虚拟环境目录</span></span><br><span class="line">    <span class="string">"python.venvPath"</span>: <span class="string">"D:/virtualenv"</span>,</span><br><span class="line">    <span class="comment"># 右键runcode 配置(解决中文乱码, 使用环境不正确问题)</span></span><br><span class="line">    <span class="string">"code-runner.executorMap"</span>: &#123;</span><br><span class="line">        <span class="string">"python"</span>: <span class="string">"set PYTHONIOENCODING=utf8 &amp;&amp; $pythonPath $fullFileName"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"gitlens.advanced.messages"</span>: &#123;</span><br><span class="line">        <span class="string">"suppressShowKeyBindingsNotice"</span>: true</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"gitlens.historyExplorer.enabled"</span>: true,</span><br><span class="line">    <span class="comment"># git自动抓取</span></span><br><span class="line">    <span class="string">"git.autofetch"</span>: true,</span><br><span class="line">    <span class="string">"git.enableSmartCommit"</span>: true,</span><br><span class="line">    <span class="comment"># 启用flake8静态代码检查工具(默认是pylint,个人感觉没有flake8看着舒服)</span></span><br><span class="line">    <span class="string">"python.linting.flake8Enabled"</span>: true,</span><br><span class="line">    <span class="string">"python.linting.pylintEnabled"</span>: false,</span><br><span class="line">    <span class="string">"window.zoomLevel"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"gitlens.views.fileHistory.enabled"</span>: true,</span><br><span class="line">    <span class="string">"gitlens.views.lineHistory.enabled"</span>: true,</span><br><span class="line">    <span class="comment"># 保存时自动格式化代码</span></span><br><span class="line">    <span class="string">"editor.formatOnSave"</span>: true,</span><br><span class="line">    <span class="comment"># 格式化代码工具(默认是autopep8,个人感觉没有yapf好用)</span></span><br><span class="line">    <span class="string">"python.formatting.provider"</span>: <span class="string">"yapf"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vscode插件推荐:</p><ul><li>Python(做Python开发必装!!!)</li><li>autoDocstring</li><li>Chinese (Simplified) Language Pack for Visual Studio Code</li><li>Code Runner</li><li>Gitlens</li><li>Markdown All in One</li><li>markdownlint</li><li>One Dark Pro(一款主题)</li><li>vscode-icons(文件图标主题)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;随着博主越来越频繁的使用Vscode做Python开发,发现这玩意儿是越来越顺手(微软大法牛啤),有的细节很实用,但是时间久了就容易忘了,故
      
    
    </summary>
    
      <category term="Vscode" scheme="http://www.superli.tech/categories/Vscode/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="Vscode" scheme="http://www.superli.tech/tags/Vscode/"/>
    
  </entry>
  
  <entry>
    <title>Python 里的相对导入和绝对导入</title>
    <link href="http://www.superli.tech/Python-%E9%87%8C%E7%9A%84%E7%9B%B8%E5%AF%B9%E5%AF%BC%E5%85%A5%E5%92%8C%E7%BB%9D%E5%AF%B9%E5%AF%BC%E5%85%A5/"/>
    <id>http://www.superli.tech/Python-里的相对导入和绝对导入/</id>
    <published>2019-01-07T02:40:09.000Z</published>
    <updated>2019-01-07T06:20:40.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这是对Python中import(导入)的更深层次理解</p><h2 id="Python-import-的工作原理"><a href="#Python-import-的工作原理" class="headerlink" title="Python import 的工作原理"></a>Python import 的工作原理</h2><p>首先你得知道:<br>Python里的模块: 是指以.py扩展名结尾的文件<br>Python里的包: 是指任何包含<strong>init</strong>.py文件的文件夹</p><p><strong>当Python导入一个abc这样的模块,过程是这样的:</strong></p><ul><li>首先会在先前导入的所有模块的缓存里(sys.modules)查找abc是否已经存在</li><li>如果没有找到,Python将会在内置模块列表(标准库)里面查找</li><li>如果还没找到,将会在其定义的目录列表里面查找(sys.path),通常这里面第一个是当前目录</li></ul><h2 id="PEP8中关于导入声明的形式"><a href="#PEP8中关于导入声明的形式" class="headerlink" title="PEP8中关于导入声明的形式"></a>PEP8中关于导入声明的形式</h2><ul><li>导入总是位于文件的顶部，在模块注释和文档字符串之后，在模块的全局变量与常量之前</li><li>导入应该按照以下的顺序分组：<ul><li>标准库导入</li><li>相关第三方导入</li><li>本地应用程序/库的特定导入</li></ul></li><li>每组导入之间使用空行隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个标准的导入样式示例</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""Illustration of good import statement styling.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Note that the imports come after the docstring.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Standard library imports</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># Third party imports</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Local application imports</span></span><br><span class="line"><span class="keyword">from</span> local_module <span class="keyword">import</span> local_class</span><br><span class="line"><span class="keyword">from</span> local_package <span class="keyword">import</span> local_function</span><br></pre></td></tr></table></figure><p>tips: 可以利用插件格式化导入排版,节省时间</p><h2 id="绝对导入-相对导入"><a href="#绝对导入-相对导入" class="headerlink" title="绝对导入 / 相对导入"></a>绝对导入 / 相对导入</h2><p>假设您有以下的目录结构:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└── project</span><br><span class="line">    ├── package1</span><br><span class="line">    │   ├── module1.py</span><br><span class="line">    │   └── module2.py</span><br><span class="line">    └── package2</span><br><span class="line">        ├── __init__.py</span><br><span class="line">        ├── module3.py</span><br><span class="line">        ├── module4.py</span><br><span class="line">        └── subpackage1</span><br><span class="line">            └── module5.py</span><br></pre></td></tr></table></figure><ul><li>package1/module2.py包含一个函数function1</li><li>package2/<strong>init</strong>.py包含一个类class1</li><li>package2/subpackage1/module5.py包含一个函数function2</li></ul><p><strong>绝对导入:</strong></p><p>使用项目根文件夹中的完整路径指定要导入的资源</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对导入示例,请注意您必须从顶级包文件夹中为每个包或文件提供详细路径</span></span><br><span class="line"><span class="keyword">from</span> package1 <span class="keyword">import</span> module1</span><br><span class="line"><span class="keyword">from</span> package1.module2 <span class="keyword">import</span> function1</span><br><span class="line"><span class="keyword">from</span> package2 <span class="keyword">import</span> class1</span><br><span class="line"><span class="keyword">from</span> package2.subpackage1.module5 <span class="keyword">import</span> function2</span><br></pre></td></tr></table></figure><p>绝对导入的利弊:<br>利: 绝对导入是首选，因为它们非常清晰和直接,事实上，PEP8明确建议使用绝对导入,只需查看语句，就可以很容易地确定导入资源的确切位置.<br>弊: 但是,有时候绝对导入会变得很冗长,比如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> package1.subpackage2.subpackage3.subpackage4.module5 <span class="keyword">import</span> function6</span><br></pre></td></tr></table></figure><p>这样绝对导入用起来就会很操蛋,这时候可以用相对导入来代替</p><p><strong>相对导入:</strong></p><p>相对于当前位置导入资源,分为隐式和显示,Python3中已经弃用隐式导入</p><p>导入function1到package1/module1.py文件中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package1/module1.py</span></span><br><span class="line"><span class="keyword">from</span> .module2 <span class="keyword">import</span> function1</span><br></pre></td></tr></table></figure><p>将class1和function2导入package2/module3.py文件中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># package2/module3.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> class1</span><br><span class="line"><span class="keyword">from</span> .subpackage1.module5 <span class="keyword">import</span> function2</span><br></pre></td></tr></table></figure><p>相对导入的利弊:<br>利: 相对进口的一个明显优势是它们非常简洁<br>弊: 它不像绝对导入那么可读,想要告诉你导入资源的位置并不容易,对于目录结构可能会发生变化的共享项目,相对导入可能会很混乱</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这是对Python中import(导入)的更深层次理解&lt;/p&gt;
&lt;h2 id=&quot;Python-import-的工作原理&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>名词总结</title>
    <link href="http://www.superli.tech/%E5%90%8D%E8%AF%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://www.superli.tech/名词总结/</id>
    <published>2019-01-03T13:23:33.000Z</published>
    <updated>2019-01-07T02:38:16.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="名词短语"><a href="#名词短语" class="headerlink" title="名词短语"></a>名词短语</h2><p>在讲名词之前先得了解什么是名词短语,他是英语造句不可或缺的元素,所以我们得学会如何构造名词短语</p><ul><li>名词短语在句子里可以充当主语,宾语,表语</li><li>英语中的介词不能够单独使用,其后面必须接宾语,所接的宾语也往往是名词短语</li><li>名词短语的构造————“左二右六”的定语规律<ul><li>限定词+形容词+中心名词+六类右置定语(介词短语,分词短语,不定式短语,形容词短语,定语从句,同位语从句)</li></ul></li><li>英语被称作是”中心词”在前的语言</li></ul><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="名词的分类"><a href="#名词的分类" class="headerlink" title="名词的分类"></a>名词的分类</h3><hr><ul><li>专有名词</li><li>普通名词<ul><li>可数名词<ul><li>个体名词</li><li>集体名词</li></ul></li><li>不可数名词<ul><li>物质名词</li><li>抽象名词</li></ul></li></ul></li></ul><hr><p><strong>专有名词:</strong><br>人名及头衔,著作名称,月份,星期,节日,地理名称(国家、大洲、地区、城市、江河、湖泊、山脉、沙漠)</p><p><em>月份(1月到12月)</em>: January, February, March, April, May, June, July, August, September, October, November, December<br><em>星期(周一到周日):</em> Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday</p><p>补充:</p><blockquote><p>阳历: the solar calendar<br>阴历: the lunar calendar  </p></blockquote><p>我们过的是阳历,农历=阴历,农历一月初一用英语说: the first of the first lunar month, 而不是 the first of January*</p><h3 id="普通名词"><a href="#普通名词" class="headerlink" title="普通名词"></a>普通名词</h3><blockquote><p>词典中标有[C] (countable)的表示可数,标有[U] (uncountable)的表示不可数</p></blockquote><h4 id="不可数名词-常用"><a href="#不可数名词-常用" class="headerlink" title="不可数名词(常用)"></a>不可数名词(常用)</h4><p><strong>一共分为五组</strong><br><strong>第一组</strong><br>一些无法分割的名词,将其看作是一个整体,没有复数变化,主要是一些物质名词</p><p>气体: air / fog / oxygen / smoke<br>液体: coffee / oil / tea / blood / water / wine / milk / soup / yogurt / beer / cream / gasoline  / honey / juice<br>固体: glass / pork / meat / poultry / bread / butter / cheese / ice / ice cream / beef(牛肉) / chicken(鸡肉) / fish(鱼肉) / chalk / copper / cotton / gold / iron / paper</p><p><strong>第二组</strong><br>一些因此组成部分太小而不容易数的名词,主要还是一些物质名词</p><p>corn / popcorn / sand / grass / rice / snow / hair / salt / sugar</p><p><strong>第三组</strong><br>表示总称的名词</p><p>clothing / food / furniture / fruit / luggage / makeup / homework / housework / jewelry / money / cash / machinery / equipment / poetry / scenery / character</p><p><strong>第四组</strong><br>抽象名词一般是不可数的</p><p>advice / fun / life / patience / art / happiness / love / pollution / beauty / health / luck / time / crime / help / music / trouble / education / information / nature / truth / energy / intelligence / noise / unemployment / experience / knowledge / nutirtion / work</p><p><strong>第五组</strong><br>表示研究学科,一般作为不可数名词</p><p>biology / geometry / history / chemistry / grammar / math</p><p><strong>“不可数名词”转”可数名词”的三条规律:</strong></p><ul><li>对于物质名词或总称名词,若是表示不同的种类,或者是因为特定的意思,或者是液体表示”几杯”或”几瓶”这样的数量,则转化为可数名词</li><li>对于抽象名词,若是具体化了,则转化为可数名词</li><li>当一个名词表示抽象、总称的概念时,一般作为不可数名词来使用,而当它表示具体的、特定的事物,则通常作为可数名词</li></ul><p><strong>不可数名词的度量:</strong><br>原则:</p><ul><li>不可数名词不能被a(an)修饰</li><li>不可数名词不能被基数词修饰</li></ul><p>常用piece修饰一下抽象名词和物质名词:<br>advice / bread / baggage / chalk / equipment / furniture / information / jewelry / luggage / music /news</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line">a piece of news(一条消息)</span><br><span class="line">two pieces of news(两条消息) #注意piece的单复数</span><br></pre></td></tr></table></figure><p>常用 bottle / cup / drop / glass 修饰液态物质:<br>beer / blood / coffee / milk / tea / water / wine</p><p>其他一些常用的量词: loaf / tube / slice</p><h4 id="名词的数-单数和复数"><a href="#名词的数-单数和复数" class="headerlink" title="名词的数(单数和复数)"></a>名词的数(单数和复数)</h4><blockquote><p>singular(单数): 词典中一般缩写成sg.<br>plural(复数): 词典中一般缩写成pl.</p></blockquote><ul><li>英语中的复数表示”多于一” eg: one and a half days(一天半,复数)</li><li>将按照单复数来分类<ul><li>只能用作单数的名词主要包括: 不可数名词 / 专有名词,谓语要用单数第三人称形式</li><li>只能用作复数的名词:<ul><li>“二合一”的复数名词<ul><li>工具和仪器: glasses / spectacles / binoculars / scales / clippers / forceps / pincers / tongs / tweezers / scissors / shears</li><li>服装: jeans / trousers / shorts / trunks / briefs / pants / slacks / pajamas</li></ul></li><li>“单形复意”的名词 eg: people用作复数 人们,人名的意思; 用作单数 民族,部族的意思<ul><li>people 复: 人们,人民 单:民族,部族 eg: a people(一个民族)</li><li>不过,用作”民族”这个意思时, 单数形式的people也通常用作复数形式的谓语</li><li>其他: cattle / police / poultry / livestock</li></ul></li><li>the + 形容词 表示一类人的复数名词</li><li>复数专有名词: the Alps / The Himalayas / The Great Lakes / The Niagara Falls</li></ul></li><li>规则的复数名词</li><li>不规则的复数名词(靠积累)</li><li>复合名词</li><li>单复数同形的名词(零复数名词)</li><li>有新词义的复数名词</li></ul></li></ul><p><strong>规则的复数名词变化规律:</strong></p><ul><li>一般在词尾加 -s</li><li>以 -s / -x / -ch / -sh 结尾的名词加 -es</li><li>以”辅音字母+y”结尾的名词,改-y为-i再加 -es,以”元音字母+y”结尾的,则还是加 -s</li><li>有关以 -o结尾的名词,有的加 -es, 有的加-s, 还有少部分加-es -s 都可以<ul><li>一般加 -es的有: tomato / hero / Negro / veto</li></ul></li><li>以-f / -fe 结尾的名词,和-o结尾在变复的情况类似<ul><li>一般变f / fe 为v,再加-es的词有: calf / half / knife / leaf / life / loaf / self / sheaf / shelf / thief / wife / wolf</li></ul></li></ul><p><strong>复合名词变复数:</strong></p><ul><li>以 man / woman + 名词 构成的复合名词,两个词均变成复数. eg: man teacher / men teachers</li><li>以 man / woman / child 结尾的复合名词, 将 man / woman / child 变为复数</li><li>以 名词 + 介词或介词短语构成的复合名词, 将主体名词(中心词)变为复数. eg: looker-on / lookers-on (旁观者)</li><li>以短语动词演变成的复合名词, 其一般没有主体名词, 直接在其尾加 -s即可. eg: grown-up / grown-ups (成年人)</li><li>以 名词 + 形容词 构成的复合名词, 把名词变复数. eg: secretary general / secretaries general(秘书长)</li></ul><p><strong>单复数同形的名词:</strong></p><p>这些名词用作单数和复数,词形完全一样</p><ul><li>动物名称: sheep / deer / bison / grouse / quail / salmon / cod</li><li>国籍名称: Chinese / Japanese / Lebanese / Portuguese / Vietnamese / Swiss / British</li></ul><p>没有形式变化的名词有三类(在只能代表一个含义的情况下):</p><ul><li>不可数名词,它们没有词形的变化只能用作单数. eg: music</li><li>复数可数名词,它们没有词形的变化只能用作复数. eg: people</li><li>单复数同形的名词,它们没有词形的变化,但是既可以做单数,也可以用作复数. eg: sheep</li></ul><p><strong>有新词意义的复数名词:</strong></p><p>有些名词在变成复数后,词义会有所改变</p><ul><li>arm(手臂) / arms(武器, 军事)</li><li>custom(风俗) / customs(海关)</li><li>damage(损失) / damages(赔偿金)</li><li>letter(信) / letters(文学)</li><li>minute(分钟) / minutes(会议记录)</li><li>spirit(精神) / spirits(烈酒)</li><li>premise(前提) / premises(房屋, 营业场所)</li><li>security(安全) / securities(证券)</li><li>line(行) / lines(台词)</li></ul><h4 id="名词所有格"><a href="#名词所有格" class="headerlink" title="名词所有格"></a>名词所有格</h4><p><strong>‘s’所有格的构成:</strong></p><ul><li>主要用来表示有生命的名词的所属关系</li><li>名词所有格的逻辑语义关系:<ul><li>所属关系</li><li>主谓关系</li><li>动宾关系</li><li>同位关系</li><li>表示时间或距离</li><li>表示重量或价值等度量</li><li>表示国家、城市、国际组织或地理名词等</li><li>用于交通工具及其部件的所属关系</li></ul></li><li>单数名词的所有格: 在词尾加 ‘s</li><li>复数名词的所有格分两种情况:<ul><li>不以-s / -es 结尾的特殊变化的复数名词, 在词尾加 ‘s</li><li>以 s 结尾的复数名词, 在词尾加 ‘</li></ul></li><li>复合名词的所有格, 在最后一个词的词尾加 ‘s</li><li>并列名词: 对于由and连接的并列名词,当表示”共有”的情况下,只需要在最后一个名词后面加 ‘s; 若表示”各自所有”,则必须在每个名词后面都加上 ‘s</li><li>名词所有格修饰的名词被省去的情况：<ul><li>避免名词重复：若名词所有格所修饰的名词已经出现过，则在第二次出现的所有格后面的名词可以省去，以避免重复. eg: This bike is mine, not Michalel’s</li><li>表示店铺或者教堂. eg: at the baker’s(在面包店) at the doctor’s(在医生的诊所)</li><li>表示某人的住宅. eg: go to my sister’s(去我姐姐家)</li></ul></li></ul><p><strong>of 属格的构成及逻辑语义关系:</strong></p><ul><li>一般表示无生命物体的名词的所属关系. eg: the name of the song(歌曲的名字) the title of the book(书名)</li><li>当有生命的名词后面接短语或从句修饰时,也用of属格. eg: What is the name of the boy sitting next to her?(坐在她身旁那个男孩的名字叫啥?)</li><li>of属格的逻辑语义关系<ul><li>主谓关系: 从右往左边翻译 N1 of N2(N1是由不及物动词变化过来名词,N2 是 N1的执行者). eg: the arrival of my mother(我老妈到了)</li><li>动宾关系: 从左往右变翻译 N1 of N2(N1是由及物动词变化过来名词,N2 是 N1的承受者). eg: America’s invasion of Iraq(美国入侵伊拉克) the discussion of the plan(讨论这个计划)<ul><li>对于不及物动词,必然是从右往左按照主谓关系翻译,而对于既可以做及物又可作不及物的动词,一般按照动宾关系从左往右翻译,除非上下文有相反的证明. eg: the shooting of the rebels (主谓关系: 叛乱者开枪扫射; 动宾关系: 开枪打死这些叛乱者)</li></ul></li><li>同位关系: N1 of N2(这里的N2 表示N1的具体内容). eg: the city of Rome(罗马城市)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;名词短语&quot;&gt;&lt;a href=&quot;#名词短语&quot; class=&quot;headerlink&quot; title=&quot;名词短语&quot;&gt;&lt;/a&gt;名词短语&lt;/h2&gt;&lt;p&gt;在讲名词之前先得了解什么是名词短语,他是英语造句不可或缺的元素,所以我们得学会如何构造名词短语&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;名
      
    
    </summary>
    
      <category term="英语" scheme="http://www.superli.tech/categories/%E8%8B%B1%E8%AF%AD/"/>
    
      <category term="名词" scheme="http://www.superli.tech/categories/%E8%8B%B1%E8%AF%AD/%E5%90%8D%E8%AF%8D/"/>
    
    
      <category term="英语" scheme="http://www.superli.tech/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>给jupyterNotebook配置属于自己的Python虚拟环境</title>
    <link href="http://www.superli.tech/%E7%BB%99jupyterNotebook%E9%85%8D%E7%BD%AE%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.superli.tech/给jupyterNotebook配置属于自己的Python虚拟环境/</id>
    <published>2018-11-07T02:02:48.000Z</published>
    <updated>2018-11-07T02:48:39.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>自从发现jupyterNotebook这种神器以后,发现项目里某些需要开会讨论的代码块,借助notebook可以很愉快的完成,只需要把环境部署到一个kernel上就行,接下来我将介绍如何在notebook上部署你专属的Python虚拟环境</p><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>默认大家已经装好了jupyter</p><ol><li>进入到你需要部署的python虚拟环境里</li></ol><p><img src="第一步.png" alt="第一步"></p><ol start="2"><li>安装ipykernel</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ipykernel</span><br></pre></td></tr></table></figure><ol start="3"><li>配置kernel</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">python -m ipykernel install --user --display-name <span class="string">"&lt;notebookKernelName&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">python -m ipykernel install --user --name &lt;localkernelName&gt; --display-name <span class="string">"&lt;notebookKernelName&gt;"</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><ul><li>如果使用方法一,且不给本地的kernel起一个名字,那么默认将会使用python3(如果你装的是python3的话)为 kernel命名,这将会导致原来的kernel被覆盖</li><li>使用方法二命名的时候,名字最好不要使用<strong>python3</strong>(如果你装的是python3的话)</li></ul><p><img src="第二部.png" alt="第二部"></p><ol start="4"><li>启动Notebook查看属于我们的kernel</li></ol><p><img src="第三步.png" alt="第三步"></p><p>我们可以打印python的路径确认一下:</p><p><img src="第四步.png" alt="第四步"></p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>如果你一不小心创建了自己不满意的kernel怎么办?没关系还可以删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter kernelspec remove kernelName</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;自从发现jupyterNotebook这种神器以后,发现项目里某些需要开会讨论的代码块,借助notebook可以很愉快的完成,只需要把环境部
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="jupyter" scheme="http://www.superli.tech/categories/Python/jupyter/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="VirtualEnvWrapper" scheme="http://www.superli.tech/tags/VirtualEnvWrapper/"/>
    
      <category term="Jupyter" scheme="http://www.superli.tech/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Python入门_4讲</title>
    <link href="http://www.superli.tech/Python%E5%85%A5%E9%97%A8-4%E8%AE%B2/"/>
    <id>http://www.superli.tech/Python入门-4讲/</id>
    <published>2018-10-19T06:15:29.000Z</published>
    <updated>2019-01-03T08:58:13.698Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="词云"><a href="#词云" class="headerlink" title="词云"></a>词云</h2><p>词云又叫文字云,是对文本里频率较高的关键词在视觉上突显出来,达到一眼看过去就能知道文本数据主要表达的意思</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="text-characters项目介绍"><a href="#text-characters项目介绍" class="headerlink" title="text_characters项目介绍"></a>text_characters项目介绍</h3><ul><li>wordcloud默认是不支持中文的分词的,但这恰恰是们擅长的</li><li>非常方便的调用</li></ul><p><strong>传统调用:</strong></p><p>先说一个最简单的,当我们需要对一篇文章进行分词的时候,传统的调用方法首先是对该文章进行分句,然后再进行分词,我们可以看一下code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先需要引用我们需要用到的模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyltp <span class="keyword">import</span> Segmentor</span><br><span class="line"><span class="keyword">from</span> pyltp <span class="keyword">import</span> SentenceSplitter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行分句</span></span><br><span class="line">test_str = <span class="string">"元芳你怎么看?我就趴着看呗!"</span></span><br><span class="line">sents = SentenceSplitter.split(test_str)</span><br><span class="line"><span class="comment"># 转换成list</span></span><br><span class="line">sents = list(sents)</span><br><span class="line">sents</span><br></pre></td></tr></table></figure><pre><code>[&apos;元芳你怎么看?&apos;, &apos;我就趴着看呗!&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行分词</span></span><br><span class="line"><span class="comment"># ltp模型目录的路径</span></span><br><span class="line">LTP_DATA_DIR = <span class="string">'/home/bnu/ltp_data'</span></span><br><span class="line"><span class="comment"># 分词模型路径，模型名称为`cws.model`</span></span><br><span class="line">cws_model_path = os.path.join(LTP_DATA_DIR, <span class="string">'cws.model'</span>)</span><br><span class="line"></span><br><span class="line">result = list()</span><br><span class="line"><span class="keyword">for</span> sen <span class="keyword">in</span> sents:</span><br><span class="line">    <span class="comment"># 初始化实例</span></span><br><span class="line">    segmentor = Segmentor()</span><br><span class="line">    <span class="comment"># 加载模型</span></span><br><span class="line">    segmentor.load(cws_model_path)</span><br><span class="line">    <span class="comment"># 开始分词</span></span><br><span class="line">    words = segmentor.segment(sen)</span><br><span class="line">    <span class="comment"># 转换成list</span></span><br><span class="line">    words = list(words)</span><br><span class="line">    result.append(words)</span><br><span class="line">print(cache_list)</span><br></pre></td></tr></table></figure><pre><code>[[&apos;元芳&apos;, &apos;你&apos;, &apos;怎么&apos;, &apos;看&apos;, &apos;?&apos;], [&apos;我&apos;, &apos;就&apos;, &apos;趴&apos;, &apos;着&apos;, &apos;看&apos;, &apos;呗&apos;, &apos;!&apos;]]</code></pre><p><strong>咱们家的调用方法:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tcharacters.ltp <span class="keyword">import</span> ltp</span><br><span class="line"><span class="comment"># 对整篇文章进行分词</span></span><br><span class="line">words = ltp.fenci(test_str)</span><br><span class="line">print(words)</span><br></pre></td></tr></table></figure><pre><code>[[&apos;元芳&apos;, &apos;你&apos;, &apos;怎么&apos;, &apos;看&apos;, &apos;?&apos;], [&apos;我&apos;, &apos;就&apos;, &apos;趴&apos;, &apos;着&apos;, &apos;看&apos;, &apos;呗&apos;, &apos;!&apos;]]</code></pre><h2 id="愉快的开始绘制我们的词云"><a href="#愉快的开始绘制我们的词云" class="headerlink" title="愉快的开始绘制我们的词云"></a>愉快的开始绘制我们的词云</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> tcharacters.ltp <span class="keyword">import</span> ltp</span><br><span class="line"><span class="keyword">from</span> ste <span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取我们第一章故事</span></span><br><span class="line">all_text = open(<span class="string">"中国人必读的100个历史故事.txt"</span>, encoding=<span class="string">"utf-8"</span>).read()</span><br><span class="line">text = all_text[:<span class="number">1526</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行分词</span></span><br><span class="line">fenci_result = ltp.fenci(text)</span><br><span class="line"><span class="comment"># 处理成wordcloud需要的数据结构</span></span><br><span class="line">fenci_result = <span class="string">" "</span>.join(util.list_merge(fenci_result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成词云</span></span><br><span class="line">wc = WordCloud(width=<span class="number">900</span>, height=<span class="number">600</span>).generate(fenci_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="comment"># 方法一(直接打印)</span></span><br><span class="line">plt.imshow(wc, interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br></pre></td></tr></table></figure><p><img src="output_11_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二(保存)</span></span><br><span class="line">wc.to_file(<span class="string">"fff.png"</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;wordcloud.wordcloud.WordCloud at 0x7fc654084f98&gt;</code></pre><p><strong>高大上的玩法:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">from</span> tcharacters.ltp <span class="keyword">import</span> ltp</span><br><span class="line"><span class="keyword">from</span> ste <span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取我们第一章故事</span></span><br><span class="line">all_text = open(<span class="string">"中国人必读的100个历史故事.txt"</span>, encoding=<span class="string">"utf-8"</span>).read()</span><br><span class="line">text = all_text[:<span class="number">1526</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行分词</span></span><br><span class="line">fenci_result = ltp.fenci(text)</span><br><span class="line"><span class="comment"># 处理成wordcloud需要的数据结构</span></span><br><span class="line">fenci_result = <span class="string">" "</span>.join(util.list_merge(fenci_result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the mask image</span></span><br><span class="line">alice_mask = np.array(Image.open(<span class="string">"./images/alice_mask.png"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个词云对象</span></span><br><span class="line">wc = WordCloud(width=<span class="number">900</span>, height=<span class="number">600</span>, background_color=<span class="string">"white"</span>, max_words=<span class="number">2000</span>,</span><br><span class="line">               mask=alice_mask, contour_width=<span class="number">3</span>, contour_color=<span class="string">'steelblue'</span>)</span><br><span class="line"><span class="comment"># 生成词云</span></span><br><span class="line">wc.generate(fenci_result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line"><span class="comment"># 方法一(直接打印)</span></span><br><span class="line">plt.imshow(wc, interpolation=<span class="string">'bilinear'</span>)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二(保存)</span></span><br><span class="line">wc.to_file(<span class="string">"alice.png"</span>)</span><br></pre></td></tr></table></figure><p><img src="output_14_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据可视化&quot;&gt;&lt;a href=&quot;#数据可视化&quot; class=&quot;headerlink&quot; title=&quot;数据可视化&quot;&gt;&lt;/a&gt;数据可视化&lt;/h1&gt;&lt;h2 id=&quot;词云&quot;&gt;&lt;a href=&quot;#词云&quot; class=&quot;headerlink&quot; title=&quot;词云&quot;&gt;&lt;/a&gt;词
      
    
    </summary>
    
      <category term="Train" scheme="http://www.superli.tech/categories/Train/"/>
    
    
      <category term="Train" scheme="http://www.superli.tech/tags/Train/"/>
    
      <category term="词云" scheme="http://www.superli.tech/tags/%E8%AF%8D%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>解决词云中文无法正常显示问题</title>
    <link href="http://www.superli.tech/%E8%A7%A3%E5%86%B3%E8%AF%8D%E4%BA%91%E4%B8%AD%E6%96%87%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://www.superli.tech/解决词云中文无法正常显示问题/</id>
    <published>2018-10-18T09:59:11.000Z</published>
    <updated>2018-10-19T01:11:40.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>wordcloud默认字体不支持中文</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>方法一:</strong></p><p>调用的时候传入font参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># windows自带的字体路径</span></span><br><span class="line">font_path = <span class="string">'C:\Windows\Fonts\simfang.ttf'</span></span><br><span class="line">wc = WordCloud(font_path=font_path)</span><br></pre></td></tr></table></figure><p><strong>方法二:</strong></p><p>一劳永逸的方法</p><ul><li>首先下载字体文件 <a href="https://pan.baidu.com/s/1pPtPSjk4ToXmpjck6IlKJQ" target="_blank" rel="noopener">simhei.ttf</a> 9rm1(当然,你也可以用电脑上自带的)</li><li>找到你自己的 wordcloud目录 (博主目录位置D:\virtualenv\scrapy\Lib\site-packages\wordcloud)</li><li>把下载好的字体文件放到该目录下</li><li>打开目录下 wordcloud.py文件进行如下修改</li></ul><p><img src="字体路径.png" alt="字体路径"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;p&gt;wordcloud默认字体不支持中文&lt;/p&gt;
&lt;h2 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="wordcloud" scheme="http://www.superli.tech/tags/wordcloud/"/>
    
  </entry>
  
  <entry>
    <title>Pip常用技巧总结</title>
    <link href="http://www.superli.tech/Pip%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://www.superli.tech/Pip常用技巧总结/</id>
    <published>2018-10-16T09:01:21.000Z</published>
    <updated>2018-10-19T01:03:53.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国内镜像源的配置"><a href="#国内镜像源的配置" class="headerlink" title="国内镜像源的配置"></a>国内镜像源的配置</h2><ul><li>在用户目录下新建pip目录</li><li>在pip目录下新建pip.ini配置文件</li><li>填入下面内容并保存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">no-warn-script-location=False</span><br></pre></td></tr></table></figure><p>常用国内镜像源:</p><ul><li>豆瓣：<a href="https://pypi.douban.com/simple" target="_blank" rel="noopener">https://pypi.douban.com/simple</a></li><li>清华大学：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li></ul><h2 id="常用的花里胡哨"><a href="#常用的花里胡哨" class="headerlink" title="常用的花里胡哨"></a>常用的花里胡哨</h2><p><strong>安装/卸载:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">pip install &lt;包名&gt;</span><br><span class="line"># 卸载</span><br><span class="line">pip uninstall &lt;包名&gt;</span><br></pre></td></tr></table></figure><p><strong>升级:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询可升级包</span><br><span class="line">pip list -o</span><br><span class="line"># 自我升级</span><br><span class="line">pip install -U pip</span><br><span class="line"># 升级包</span><br><span class="line">pip install -U &lt;包名&gt;</span><br></pre></td></tr></table></figure><p><strong>查询:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查询包所在目录</span><br><span class="line">pip show -f &lt;包名&gt;</span><br><span class="line"># 搜索包</span><br><span class="line">pip search &lt;关键字&gt;</span><br></pre></td></tr></table></figure><p><strong>列出已安装的包:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 方法一</span><br><span class="line">pip freeze</span><br><span class="line"></span><br><span class="line"># 方法二</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><p><strong>下载而不安装包:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip download -d &lt;目录&gt;</span><br><span class="line"></span><br><span class="line"># 高级点的</span><br><span class="line">pip download -d &lt;目录&gt; -r requirements.txt</span><br></pre></td></tr></table></figure><p><strong>导出/安装 requirements.txt:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 导出</span><br><span class="line">pip freeze &gt; &lt;目录&gt;/requirements.txt</span><br><span class="line"># 安装</span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;国内镜像源的配置&quot;&gt;&lt;a href=&quot;#国内镜像源的配置&quot; class=&quot;headerlink&quot; title=&quot;国内镜像源的配置&quot;&gt;&lt;/a&gt;国内镜像源的配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在用户目录下新建pip目录&lt;/li&gt;
&lt;li&gt;在pip目录下新建pip.ini配
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="pip" scheme="http://www.superli.tech/categories/Python/pip/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="Pip" scheme="http://www.superli.tech/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>Python入门_3讲</title>
    <link href="http://www.superli.tech/Python%E5%85%A5%E9%97%A8-3%E8%AE%B2/"/>
    <id>http://www.superli.tech/Python入门-3讲/</id>
    <published>2018-10-12T04:50:49.000Z</published>
    <updated>2019-01-03T08:58:07.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬虫超光速入门"><a href="#爬虫超光速入门" class="headerlink" title="爬虫超光速入门"></a>爬虫超光速入门</h1><h2 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫?"></a>什么是爬虫?</h2><p>请求网站并提取数据的自动化程序</p><h2 id="爬虫的基本流程"><a href="#爬虫的基本流程" class="headerlink" title="爬虫的基本流程"></a>爬虫的基本流程</h2><p><img src="爬虫流程.png" alt="爬虫流程"></p><ol><li>通过HTTP库向目标站点发起请求，即发送一个Request，请求可以包含额外的headers等信息，等待服务器响应</li><li>如果服务器能正常响应，会得到一个Response，Response的内容便是所要获取的页面内容，类型可能有HTML，Json字符串，二进制数据（如图片视频）等类型</li><li>得到的内容可能是HTML，可以用正则表达式、网页解析库进行解析。可能是Json，可以直接转为Json对象解析，可能是二进制数据，可以做保存或者进一步的处理</li><li>保存形式多样，可以存为文本，也可以保存至数据库，或者保存特定格式的文件</li></ol><h2 id="爬虫基本原理解析"><a href="#爬虫基本原理解析" class="headerlink" title="爬虫基本原理解析"></a>爬虫基本原理解析</h2><p><strong>Request中包含什么？</strong></p><ul><li>请求方式:主要有GET、POST两种类型，另外还有HEAD、PUT、DELETE、OPTIONS等。</li><li>请求url: URL全称统一资源定位符，如一个网页文档、一张图片、一个视频等都可以用URL唯一来确定。</li><li>请求头: 包含请求时的头部信息，如User-Agent、Host、Cookies等信息。</li><li>请求体: 请求时额外携带的数据,如表单提交时的表单数据</li></ul><p><strong>Response中包含什么？</strong></p><ul><li>响应状态: 有多种响应状态，如200代表成功、301跳转、404找不到页面、502服务器错误</li><li>响应头: 如内容类型、内容长度、服务器信息、设置Cookie等等。</li><li>响应体: 最主要的部分，包含了请求资源的内容，如网页HTML、图片二进制数据等。</li></ul><p><strong>能抓怎样的数据？</strong></p><ul><li>网页文本: 如HTML文档、Json格式文本等。</li><li>图片: 获取到的是二进制文件，保存为图片格式。</li><li>视屏: 同为二进制文件，保存为视频格式即可!</li><li>其他: 只要是能请求到的，都能获取</li></ul><p><strong>常用的解析方法:</strong></p><ul><li>直接处理</li><li>json解析</li><li>正则表达式</li><li>BeautifulSoup</li><li>PyQuery</li><li>XPath</li></ul><p><strong>解决JavaScript渲染问题的常用方法？</strong></p><ul><li>分析Ajax请求</li><li>通过Selenium/WebDriver</li></ul><p><strong>怎样保存数据？</strong></p><ul><li>文本: 纯文本、Json、Xml等</li><li>关系型数据库: 如MySQL、Oracle、SQL Server等具有结构化表结构形式存储</li><li>非关系型数据库: 如MongoDB、Redis等Key-Value形式存储</li><li>二进制文件: 如图片、视频、音频等等直接保存成特定格式即可</li></ul><h2 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h2><p>来不及解释了,快上车!!!</p><p><img src="任务.png" alt="任务"></p><p>我知道你们肯定懒得输地址: <a href="http://www.17k.com/book/271047.html" target="_blank" rel="noopener">http://www.17k.com/book/271047.html</a> </p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>python3的安装包在我们提供的资料里有</p><ul><li>安装python3(如果不清楚请<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316090478912dab2a3a9e8f4ed49d28854b292f85bb000" target="_blank" rel="noopener">猛击这里</a>)</li><li>验证python是否安装成功</li><li>安装爬虫依赖库<ul><li>进入爬虫项目 <strong>CreepFiction</strong> 目录下</li><li>在任意空白处,按住Shift+鼠标右键选择<strong>在此处打开powershell窗口</strong></li><li>在命令行输入 pip install -r requirements.txt 并回车</li></ul></li></ul><h3 id="执行爬虫"><a href="#执行爬虫" class="headerlink" title="执行爬虫"></a>执行爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在命令行输入 python creep_start.py 并回车</span><br></pre></td></tr></table></figure><p><strong>查看抓取的结果:</strong></p><p><img src="结果.png" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬虫超光速入门&quot;&gt;&lt;a href=&quot;#爬虫超光速入门&quot; class=&quot;headerlink&quot; title=&quot;爬虫超光速入门&quot;&gt;&lt;/a&gt;爬虫超光速入门&lt;/h1&gt;&lt;h2 id=&quot;什么是爬虫&quot;&gt;&lt;a href=&quot;#什么是爬虫&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Train" scheme="http://www.superli.tech/categories/Train/"/>
    
    
      <category term="Train" scheme="http://www.superli.tech/tags/Train/"/>
    
      <category term="爬虫" scheme="http://www.superli.tech/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Numpy里nan,inf的快速转换</title>
    <link href="http://www.superli.tech/Numpy%E9%87%8Cnan-inf%E7%9A%84%E5%BF%AB%E9%80%9F%E8%BD%AC%E6%8D%A2/"/>
    <id>http://www.superli.tech/Numpy里nan-inf的快速转换/</id>
    <published>2018-10-11T01:37:16.000Z</published>
    <updated>2018-10-19T01:14:35.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在处理np.ndarray时,当数组里有nan,inf时,得到的结果往往和我们的预期不大符合,比如当我们计算累加时:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">nn = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, np.nan])</span><br><span class="line">print(nn.sum())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nan</span><br></pre></td></tr></table></figure><p>原因其实很简单,Python里nan,inf对象都具有传播特性,这时候就需要我们把nan或inf转换成我们需要的值</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>numpy.nan_to_num(x, copy=True)</p><ul><li>x: array_like</li><li>copy=True时,不对原数据进行修改</li><li>数组里nan变为0, inf(-inf)变为有限大的一个数</li><li>return: ndarray, 返回的结果拥有和原数据相同的shape,dtype变为数组里最精准的类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.set_printoptions(precision=<span class="number">4</span>)</span><br><span class="line">x = np.array([np.inf, -np.inf, np.nan, <span class="number">-128</span>, <span class="number">128</span>])</span><br><span class="line">np.nan_to_num(x)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">array([ 1.7977e+308, -1.7977e+308,  0.0000e+000, -1.2800e+002,</span><br><span class="line">        1.2800e+002])</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nan_inf2zero</span><span class="params">(array)</span>:</span></span><br><span class="line">    where_are_nan = np.isnan(array)</span><br><span class="line">    where_are_inf = np.isinf(array)</span><br><span class="line">    array[where_are_nan] = <span class="number">0</span></span><br><span class="line">    array[where_are_inf] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">x = np.array([np.inf, -np.inf, np.nan, <span class="number">-128</span>, <span class="number">128</span>])</span><br><span class="line">result = nan_inf2zero(x)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([   0.,    0.,    0., -128.,  128.])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在处理np.ndarray时,当数组里有nan,inf时,得到的结果往往和我们的预期不大符合,比如当我们计算累加时:&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="numpy" scheme="http://www.superli.tech/categories/Python/numpy/"/>
    
    
      <category term="Numpy" scheme="http://www.superli.tech/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Python入门_2讲</title>
    <link href="http://www.superli.tech/Python%E5%85%A5%E9%97%A8-2%E8%AE%B2/"/>
    <id>http://www.superli.tech/Python入门-2讲/</id>
    <published>2018-09-28T06:46:31.000Z</published>
    <updated>2019-01-03T08:57:59.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门-2讲"><a href="#Python入门-2讲" class="headerlink" title="Python入门_2讲"></a>Python入门_2讲</h1><h2 id="上节课的回顾"><a href="#上节课的回顾" class="headerlink" title="上节课的回顾"></a>上节课的回顾</h2><ul><li>Python里的关键字</li><li>神器的存储机制(指针问题)</li><li>回顾一下上节课的牛刀大试</li></ul><h2 id="Python-里主要的数据类型"><a href="#Python-里主要的数据类型" class="headerlink" title="Python 里主要的数据类型"></a>Python 里主要的数据类型</h2><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><p>在讲基本的数据类型之前,我们先简单的了解一下Python里关于序列的简单概念</p><p>序列具备的基本特点:</p><ul><li>序列是Python中最基本的数据结构</li><li>序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推</li><li>序列都可以进行的操作包括索引，切片，加，乘，检查成员</li><li>Python已经内置确定序列的长度以及确定最大和最小的元素的方法</li><li>序列里面最常见的就是列表和元组</li></ul><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><p>特点:</p><ul><li>列表中元素的类型可以不相同,甚至可以包含列表</li><li>列表是写在方括号([])之间、用逗号分隔开的元素列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line">names = [<span class="string">"AsyDogface"</span>, <span class="string">"Bnu"</span>, <span class="string">"Bistu"</span>, <span class="string">"Eric"</span>, <span class="string">"HelloKitty"</span>]</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 访问列表中的值</span></span><br><span class="line">names[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改列表</span></span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"Python"</span></span><br><span class="line">names</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">names.append(<span class="string">"zhangsan"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">name2 = [<span class="string">"zhangsan"</span>]</span><br><span class="line">names += name2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line">name2 = [<span class="string">"zhangsan"</span>]</span><br><span class="line">names.extend(name2)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列表里的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="comment"># 通过下标删除</span></span><br><span class="line"><span class="keyword">del</span> names[<span class="number">1</span>]</span><br><span class="line">names</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="comment"># 删除指定元素</span></span><br><span class="line">names.remove(<span class="string">"Eric"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line">last_value = names.pop()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切片(重点掌握)</span></span><br><span class="line">names[<span class="number">1</span>:<span class="number">4</span>]  <span class="comment">#取下标1至下标4之间的数字，包括1，不包括4(前闭后开)</span></span><br><span class="line">names[<span class="number">1</span>:<span class="number">-1</span>] <span class="comment">#取下标1至-1的值，不包括-1</span></span><br><span class="line">names[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">names[:<span class="number">3</span>] <span class="comment">#如果是从头开始取，0可以忽略，跟上句效果一样</span></span><br><span class="line">names[<span class="number">3</span>:] <span class="comment">#如果想取最后一个，必须不能写-1，只能这么写</span></span><br><span class="line">names[<span class="number">3</span>:<span class="number">-1</span>] <span class="comment">#这样-1就不会被包含了</span></span><br><span class="line">names[<span class="number">0</span>::<span class="number">2</span>] <span class="comment">#后面的2是代表，每隔一个元素，就取一个</span></span><br><span class="line">names[::<span class="number">2</span>] <span class="comment">#和上句效果一样</span></span><br></pre></td></tr></table></figure><p><strong>常用方法:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计</span></span><br><span class="line">names.count(<span class="string">"Bnu"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">numbers = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">99</span>]</span><br><span class="line">numbers.sort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 翻转</span></span><br><span class="line">names.reverse()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取下标</span></span><br><span class="line">names.index(<span class="string">"Bnu"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环</span></span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p><strong>关于列表的一些扩展:</strong></p><p>列表推导式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vec = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">[[x, x**<span class="number">2</span>] <span class="keyword">for</span> x <span class="keyword">in</span> vec] <span class="comment"># result:[[2, 4], [4, 16], [6, 36]]</span></span><br><span class="line"><span class="comment"># 我们可以用 if 子句作为过滤器</span></span><br><span class="line">[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec <span class="keyword">if</span> x &gt; <span class="number">3</span>] <span class="comment"># result:[12, 18]</span></span><br></pre></td></tr></table></figure><p>循环里的一些技巧:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vec1 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line">vec2 = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">-9</span>]</span><br><span class="line">[x*y <span class="keyword">for</span> x <span class="keyword">in</span> vec1 <span class="keyword">for</span> y <span class="keyword">in</span> vec2] <span class="comment"># result:[8, 6, -18, 16, 12, -36, 24, 18, -54]</span></span><br><span class="line">[vec1[i]*vec2[i] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(vec1))] <span class="comment"># result:[8, 12, -54]</span></span><br></pre></td></tr></table></figure><p>以下实例将3X4的矩阵列表转换为4X3列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> matrix = [</span><br><span class="line">     [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">     [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">     [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>], ]</span><br><span class="line"></span><br><span class="line">[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>)] <span class="comment"># result:[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</span></span><br></pre></td></tr></table></figure><p><strong>牛刀: 还试呐?</strong></p><p>问题: 有这么个列表 [8, 0, 1, 7, 4, 6, 9, 1, 2, 6, 5, 6, 0, 5, 3, 4, 5, 9, 8, 3] 打印出列表里面数为9的索引值</p><h3 id="Tuple-元组"><a href="#Tuple-元组" class="headerlink" title="Tuple(元组)"></a>Tuple(元组)</h3><ul><li>元组其实跟列表差不多，也是存一组数，只不是它一旦创建，便不能再修改，所以又叫只读列表</li><li>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用</li><li>它只有2个方法，一个是count,一个是index</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"></span><br><span class="line">names = (<span class="string">"alex"</span>,<span class="string">"jack"</span>,<span class="string">"eric"</span>)</span><br><span class="line">print(<span class="string">"names的类型:"</span>,type(names))</span><br><span class="line">print(<span class="string">"names的值:"</span>,names)</span><br></pre></td></tr></table></figure><h3 id="Dictionary-字典"><a href="#Dictionary-字典" class="headerlink" title="Dictionary(字典)"></a>Dictionary(字典)</h3><ul><li>字典是无序的</li><li>字典当中的元素是通过键来存取的，而不是通过索引(偏移量)存取</li><li>字典是一种映射类型，字典用”{ }”标识，它是一个无序的键(key) : 值(value)对集合</li><li>在同一个字典中，键(key)必须是唯一的</li><li>键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line">info = &#123;</span><br><span class="line">    <span class="string">'stu1'</span>: <span class="string">"TengLan Wu"</span>,</span><br><span class="line">    <span class="string">'stu2'</span>: <span class="string">"LongZe Luola"</span>,</span><br><span class="line">    <span class="string">'stu3'</span>: <span class="string">"XiaoZe Maliya"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">info.get(<span class="string">"stu1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">info[<span class="string">"stu1"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1和方法2有什么区别?</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加</span></span><br><span class="line">info[<span class="string">"stu4"</span>] = <span class="string">"cangjingkong"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改</span></span><br><span class="line">info[<span class="string">"stu4"</span>] = <span class="string">"wutenglan"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">info.pop(<span class="string">"stu4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">"stu1"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法3</span></span><br><span class="line"><span class="comment"># 随机删除</span></span><br><span class="line">info.popitem()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典的嵌套</span></span><br><span class="line"></span><br><span class="line">av_catalog = &#123;</span><br><span class="line">    <span class="string">"欧美"</span>:&#123;</span><br><span class="line">        <span class="string">"www.youporn.com"</span>: [<span class="string">"很多免费的,世界最大的"</span>,<span class="string">"质量一般"</span>],</span><br><span class="line">        <span class="string">"www.pornhub.com"</span>: [<span class="string">"很多免费的,也很大"</span>,<span class="string">"质量比yourporn高点"</span>],</span><br><span class="line">        <span class="string">"letmedothistoyou.com"</span>: [<span class="string">"多是自拍,高质量图片很多"</span>,<span class="string">"资源不多,更新慢"</span>],</span><br><span class="line">        <span class="string">"x-art.com"</span>:[<span class="string">"质量很高,真的很高"</span>,<span class="string">"全部收费,屌比请绕过"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"日韩"</span>:&#123;</span><br><span class="line">        <span class="string">"tokyo-hot"</span>:[<span class="string">"质量怎样不清楚,个人已经不喜欢日韩范了"</span>,<span class="string">"听说是收费的"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"大陆"</span>:&#123;</span><br><span class="line">        <span class="string">"1024"</span>:[<span class="string">"全部免费,真好,好人一生平安"</span>,<span class="string">"服务器在国外,慢"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">av_catalog[<span class="string">"大陆"</span>][<span class="string">"1024"</span>][<span class="number">1</span>] += <span class="string">",可以用爬虫爬下来"</span></span><br><span class="line">print(av_catalog[<span class="string">"大陆"</span>][<span class="string">"1024"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方法1</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> info:</span><br><span class="line">    print(key,info[key])</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法2</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> info.items(): <span class="comment">#会先把dict转成list,数据里大时莫用</span></span><br><span class="line">    print(k,v)</span><br></pre></td></tr></table></figure><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><p>特点:</p><ul><li>一个无序不重复元素的序列</li><li>基本功能是进行成员关系测试和删除重复元素</li><li>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个唯一字符的集合</span></span><br><span class="line">set(<span class="string">"Hello"</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个数值集合  </span></span><br><span class="line">set([<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关系测试</span></span><br><span class="line"></span><br><span class="line">s = set(<span class="string">"Hi"</span>) </span><br><span class="line">t = set(<span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = t|s          <span class="comment"># t 和 s的并集  </span></span><br><span class="line">b = t&amp;s          <span class="comment"># t 和 s的交集 </span></span><br><span class="line">c = t-s          <span class="comment"># 求差集（项在t中，但不在s中）</span></span><br><span class="line">d = t^s          <span class="comment"># 对称差集（项在t或s中，但不会同时出现在二者中）</span></span><br></pre></td></tr></table></figure><h4 id="牛刀大大大大试"><a href="#牛刀大大大大试" class="headerlink" title="牛刀大大大大试"></a>牛刀大大大大试</h4><p>任务二:<br>编写一个多级菜单,要求实现:</p><ul><li>三级菜单</li><li>可依次选择进入、退出各子菜单</li></ul><p>完成一级菜单 / 二级菜单</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python入门-2讲&quot;&gt;&lt;a href=&quot;#Python入门-2讲&quot; class=&quot;headerlink&quot; title=&quot;Python入门_2讲&quot;&gt;&lt;/a&gt;Python入门_2讲&lt;/h1&gt;&lt;h2 id=&quot;上节课的回顾&quot;&gt;&lt;a href=&quot;#上节课的回顾&quot; cla
      
    
    </summary>
    
      <category term="Train" scheme="http://www.superli.tech/categories/Train/"/>
    
    
      <category term="Train" scheme="http://www.superli.tech/tags/Train/"/>
    
  </entry>
  
  <entry>
    <title>Python入门_1讲</title>
    <link href="http://www.superli.tech/Python%E5%85%A5%E9%97%A8-1%E8%AE%B2/"/>
    <id>http://www.superli.tech/Python入门-1讲/</id>
    <published>2018-09-19T11:10:54.000Z</published>
    <updated>2019-01-03T08:57:51.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python入门-1讲"><a href="#Python入门-1讲" class="headerlink" title="Python入门_1讲"></a>Python入门_1讲</h1><p>关于本人培训之前需要注意的几点:</p><ul><li>培训的通知, 培训资料的下载(<a href="http://www.superli.tech/categories/Train/">无敌传送门</a>)</li><li>课后问题的回复</li><li>本人的一些情况</li><li><a href="https://github.com/Easy318/MyPicture/blob/master/%E5%9B%BE%E5%BD%A2%E6%A8%A1%E6%9D%BF/%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2.png?raw=true" target="_blank" rel="noopener">课程大纲</a></li></ul><h2 id="Python-里的基本概念"><a href="#Python-里的基本概念" class="headerlink" title="Python 里的基本概念"></a>Python 里的基本概念</h2><h3 id="程序的注释"><a href="#程序的注释" class="headerlink" title="程序的注释"></a>程序的注释</h3><p>Python的编译器会忽略注释掉的文本,但是,作为文档,它对程序的阅读者是很有帮助的</p><p>基本的使用:</p><ul><li>单行注释使用 <strong>#</strong></li><li>多行注释使用 <strong>3个单引号或者3个双引号括</strong> 起来的一个字符串</li></ul><h3 id="标识符的拼写和命名惯例"><a href="#标识符的拼写和命名惯例" class="headerlink" title="标识符的拼写和命名惯例"></a>标识符的拼写和命名惯例</h3><ul><li>Python 对大小写敏感(区分大小写)</li><li>标识符由字母、数字和下划线组成</li><li>标识符必须是字母或下划线( _ )开头</li><li>不能以关键字(保留字)命名</li></ul><p>Python里面的关键字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure><p>命名规范:</p><ul><li>为什么使用命名规范<ul><li>程序员们为了自己的代码能更容易的在同行之间交流，所以多采取统一的可读性比较好的命名方式</li><li>驼峰式命名法 / 下划线法</li></ul></li><li>类名采用大驼峰式命名,即首字母需要大写</li><li>模块、变量、函数和方法名称可以凭自己喜好使用 驼峰式命名法 / 下划线法</li><li>当一个变量名是一个常量的时候所有字母大写</li></ul><p>概念补充：</p><ul><li>驼峰式命名： 骆驼式命名法就是当变量名或函数名是由一个或多个单词连结在一起，而构成的唯一识别字时，第一个单词以小写字母开始，从第二个单词开始以后的每个单词的首字母都采用大写字母，例如：myFirstName、myLastName，这样的变量名看上去就像骆驼峰一样此起彼伏</li><li>下划线命名法： 逻辑断点之间用下划线连接，字母全部小写，例如： my_firstname, my_lastname</li></ul><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><p>Python使用缩进来表示代码块,而不是{},缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数, 为了统一,一般使用4个空格来进行缩进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">False</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非标准</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">False</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"False"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">False</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"True"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"False"</span>)</span><br><span class="line">   print(<span class="string">"Hello, world"</span>)</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>只介绍基本的数据类型:</p><table><thead><tr><th>数据类型</th><th>例子</th></tr></thead><tbody><tr><td>Number（数字)</td><td>int,long,float,complex</td></tr><tr><td>String（字符串)</td><td>“BNU”</td></tr><tr><td>List（列表)</td><td>[1,2,3],[1,2,3,[1,2,3],4]</td></tr><tr><td>Dictionary（字典)</td><td>{1:”nihao”,2:”hello”}</td></tr><tr><td>Tuple（元组)</td><td>(1,2,3,abc)</td></tr><tr><td>Bool（布尔)</td><td>True、False</td></tr></tbody></table><p><strong>变量的声明:</strong> 因为在Python里面一切皆对象, 任何变量都可以指定为任何类型的一个值,所以不需要为该变量声明为某一个类型,这和很多其他语言中的情况不太一样, 但是请记住,所有的值和对象都是有类型的,而且类型错误一定会进行检查</p><p>一个简单的赋值操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"Hello, Python"</span></span><br><span class="line">text</span><br></pre></td></tr></table></figure><h3 id="输出-输入"><a href="#输出-输入" class="headerlink" title="输出/输入"></a>输出/输入</h3><p><strong>输出:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(text)</span><br></pre></td></tr></table></figure><p><strong>输入:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_input = input(<span class="string">"&gt;&gt;&gt;:"</span>)</span><br><span class="line">print(user_input)</span><br></pre></td></tr></table></figure><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><p>Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块</p><p>用图来简单表示:</p><p><img src="条件控制.png" alt="条件控制"></p><p>Python中if语句的一般形式如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br></pre></td></tr></table></figure><ul><li>如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句</li><li>如果 “condition_1” 为False，将判断 “condition_2”</li><li>如果”condition_2” 为 True 将执行 “statement_block_2” 块语句</li><li>如果 “condition_2” 为False，将执行”statement_block_3”块语句</li></ul><p><strong>注意:</strong></p><ul><li>Python 中用 elif 代替了 else if，所以if语句的关键字为：if – elif – else</li><li>每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块</li><li>使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块</li><li>在Python中没有switch – case语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评级</span></span><br><span class="line">score = <span class="number">90</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="number">0</span> &lt; score &lt;= <span class="number">60</span>:</span><br><span class="line">    print(<span class="string">"不及格"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">60</span> &lt; score &lt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">"良好"</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="number">90</span> &lt; score &lt;=<span class="number">100</span>:</span><br><span class="line">    print(<span class="string">"优秀"</span>)</span><br></pre></td></tr></table></figure><p>牛刀小试: <strong>猜数字游戏</strong></p><p>操作中…</p><h3 id="逻辑循环"><a href="#逻辑循环" class="headerlink" title="逻辑循环"></a>逻辑循环</h3><p>Python中的循环语句有 for 和 while</p><p><strong>注意:</strong> 切勿把程序写成死循环</p><h4 id="while-loop"><a href="#while-loop" class="headerlink" title="while loop"></a>while loop</h4><p>简单的用流程图表示为:</p><p><img src="whileloop.png" alt="whileloop"></p><p>基本句法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件：</span><br><span class="line">    语句</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">while</span> 判断条件:</span><br><span class="line">    成立则执行该语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    不成立则执行该语句然后退出</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环10次:</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"你是风儿我是沙,缠缠绵绵到天涯..."</span>,count)</span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">10</span>:</span><br><span class="line">        print(<span class="string">"What the hell 风和沙,你们这些bad guy.."</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" 小于 5"</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (count, <span class="string">" 大于或等于 5"</span>)</span><br></pre></td></tr></table></figure><h4 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h4><p>Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串</p><p>for循环的一般格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印10个数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(<span class="string">"loop:"</span>, i )</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"循环完毕"</span>)</span><br></pre></td></tr></table></figure><p><strong>关于 continu与break 用法:</strong></p><p>需求一：还是上面的程序，但是遇到小于5的循环次数就不走了，直接跳入下一次循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span> <span class="comment">#不往下走了,直接进入下一次loop</span></span><br><span class="line">    print(<span class="string">"loop:"</span>, i )</span><br></pre></td></tr></table></figure><p>需求二：还是上面的程序，但是遇到大于5的循环次数就不走了，直接退出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i&gt;<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span> <span class="comment">#不往下走了,直接跳出整个loop</span></span><br><span class="line">    print(<span class="string">"loop:"</span>, i )</span><br></pre></td></tr></table></figure><h3 id="牛刀大试"><a href="#牛刀大试" class="headerlink" title="牛刀大试"></a>牛刀大试</h3><p>回到上面for 循环的例子，如何实现让用户不断的猜年龄，但用户最多只有3次猜的机会，再猜不对就退出程序</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python入门-1讲&quot;&gt;&lt;a href=&quot;#Python入门-1讲&quot; class=&quot;headerlink&quot; title=&quot;Python入门_1讲&quot;&gt;&lt;/a&gt;Python入门_1讲&lt;/h1&gt;&lt;p&gt;关于本人培训之前需要注意的几点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;培训的通
      
    
    </summary>
    
      <category term="Train" scheme="http://www.superli.tech/categories/Train/"/>
    
    
      <category term="Train" scheme="http://www.superli.tech/tags/Train/"/>
    
  </entry>
  
  <entry>
    <title>一个部落</title>
    <link href="http://www.superli.tech/game/"/>
    <id>http://www.superli.tech/game/</id>
    <published>2018-09-19T11:01:12.000Z</published>
    <updated>2019-01-03T09:00:48.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个部落注意事项"><a href="#一个部落注意事项" class="headerlink" title="一个部落注意事项"></a>一个部落注意事项</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个部落注意事项&quot;&gt;&lt;a href=&quot;#一个部落注意事项&quot; class=&quot;headerlink&quot; title=&quot;一个部落注意事项&quot;&gt;&lt;/a&gt;一个部落注意事项&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Game" scheme="http://www.superli.tech/categories/Game/"/>
    
    
      <category term="Game" scheme="http://www.superli.tech/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>培训通知帖</title>
    <link href="http://www.superli.tech/%E5%9F%B9%E8%AE%AD%E9%80%9A%E7%9F%A5%E5%B8%96/"/>
    <id>http://www.superli.tech/培训通知帖/</id>
    <published>2018-09-18T06:58:41.000Z</published>
    <updated>2019-01-03T09:01:13.968Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>今后(仅限本人)所有培训通知将会在此帖更新</p><h2 id="第一次培训通知"><a href="#第一次培训通知" class="headerlink" title="第一次培训通知"></a>第一次培训通知</h2><ul><li>培训时间: 2018/9/21</li><li>培训地点: 你们熟悉的教室</li><li>培训内容: Python入门_1讲</li><li>资料下载: <a href="https://pan.baidu.com/s/1fB2V2DI-0DblyUr57gj49w" target="_blank" rel="noopener">猛击这里获取</a></li></ul><h2 id="第二次培训通知"><a href="#第二次培训通知" class="headerlink" title="第二次培训通知"></a>第二次培训通知</h2><ul><li>培训时间: 2018/9/28</li><li>培训地点: 你们熟悉的教室</li><li>培训内容: Python入门_2讲</li><li>资料下载: <a href="https://pan.baidu.com/s/1CaTuV8SVFWjPVHiKMtUp5Q" target="_blank" rel="noopener">猛击这里获取</a></li></ul><h2 id="第三次培训通知"><a href="#第三次培训通知" class="headerlink" title="第三次培训通知"></a>第三次培训通知</h2><ul><li>培训时间: 2018/10/12</li><li>培训地点: 你们熟悉的教室</li><li>培训内容: Python入门_3讲</li><li>资料下载: <a href="https://pan.baidu.com/s/1KpCYkvNMFsX0ZjfyjrHL6w" target="_blank" rel="noopener">猛击这里获取</a></li></ul><h2 id="第四次培训通知-最后一次"><a href="#第四次培训通知-最后一次" class="headerlink" title="第四次培训通知(最后一次)"></a>第四次培训通知(最后一次)</h2><ul><li>培训时间: 2018/10/19</li><li>培训地点: 你们熟悉的教室</li><li>培训内容: Python入门_4讲</li><li>资料下载: <a href="https://pan.baidu.com/s/1hP3z69cdSSAA1_DiFDdwug" target="_blank" rel="noopener">猛击这里获取</a></li></ul><h2 id="最后更新时间"><a href="#最后更新时间" class="headerlink" title="最后更新时间"></a>最后更新时间</h2><p>2018年10月19日14:26:14</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;今后(仅限本人)所有培训通知将会在此帖更新&lt;/p&gt;
&lt;h2 id=&quot;第一次培训通知&quot;&gt;&lt;a href=&quot;#第一次培训通知&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Train" scheme="http://www.superli.tech/categories/Train/"/>
    
    
      <category term="Train" scheme="http://www.superli.tech/tags/Train/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下多用户版jupyterhub部署</title>
    <link href="http://www.superli.tech/Ubuntu%E4%B8%8B%E5%A4%9A%E7%94%A8%E6%88%B7%E7%89%88jupyterhub%E9%83%A8%E7%BD%B2/"/>
    <id>http://www.superli.tech/Ubuntu下多用户版jupyterhub部署/</id>
    <published>2018-08-23T11:11:14.000Z</published>
    <updated>2018-10-19T01:12:53.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下多用户版jupyterhub部署"><a href="#Ubuntu下多用户版jupyterhub部署" class="headerlink" title="Ubuntu下多用户版jupyterhub部署"></a>Ubuntu下多用户版jupyterhub部署</h1><p>最近培训关于Python的一些课程,因为面对的是一些不太了解编程的研究生,后期可能会遇到配置开发环境等等一系列问题,所以Leader决定在工作站部署一个多用户版的jupyterhub供大家学习使用.</p><p>需求:</p><ul><li>大家统一使用一个虚拟环境,解决重复配置开发环境问题</li><li>能够实现多用户登录,每人对应一个账号密码</li><li>改造一下登陆后的template,可以造成让大家以为这玩意儿是我们开发的假象~</li></ul><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p>本地环境:</p><ul><li>Python 3.5.2</li><li>Linux4.4.0-128-generic_x86_64</li></ul><h3 id="安装jupyterhub"><a href="#安装jupyterhub" class="headerlink" title="安装jupyterhub"></a>安装jupyterhub</h3><p>新建一个虚拟环境:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv jupyterhub</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装最新版本的npm/nodejs-legacy</span><br><span class="line">sudo apt-get install npm nodejs-legacy</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装hub和代理</span><br><span class="line">pip install jupyterhub</span><br><span class="line">npm install -g configurable-http-proxy</span><br><span class="line"><span class="meta">#</span> needed if running the notebook servers locally</span><br><span class="line">pip install notebook</span><br></pre></td></tr></table></figure><p>判断是否安装成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jupyterhub -h</span><br><span class="line">configurable-http-proxy -h</span><br></pre></td></tr></table></figure><p>启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Visit https://localhost:8000,默认端口号8000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> To start the Hub server, run the command</span><br><span class="line">jupyterhub</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> To allow multiple users to sign in to the Hub server, you must start jupyterhub as a privileged user, such as root</span><br><span class="line">sudo jupyterhub</span><br></pre></td></tr></table></figure><h3 id="jupyterhub配置"><a href="#jupyterhub配置" class="headerlink" title="jupyterhub配置"></a>jupyterhub配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 新建一个用户,用作管理所有jupyterhub下的账号信息</span><br><span class="line">adduser jpadmin</span><br><span class="line"><span class="meta">#</span> 新建一个普通测试用户</span><br><span class="line">adduser xiaozhang</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 创建一个.myjupyterhub文件夹用作管理jupyterhub配置文件</span><br><span class="line">cd /home/jpadmin</span><br><span class="line">mkdir .jupyterhub</span><br><span class="line">cd /home/jpadmin/.jupyterhub</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 生成配置文件</span><br><span class="line">jupyterhub --generate-config</span><br><span class="line"><span class="meta">#</span> 打开配置文件,添加以下配置并保存</span><br><span class="line">vim jupyterhub_config.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 是否启动浏览器</span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line"><span class="meta">#</span> 管理员级别用户</span><br><span class="line">c.JupyterHub.admin_users = &#123;'jpadmin'&#125;</span><br><span class="line"><span class="meta">#</span> 普通级别用户</span><br><span class="line">c.Authenticator.whitelist = &#123;'xiaozhang'&#125;</span><br></pre></td></tr></table></figure><h3 id="kernel配置"><a href="#kernel配置" class="headerlink" title="kernel配置"></a>kernel配置</h3><p><strong>注意:</strong> 如果此后是通过jupyterhub admin前端添加的用户,还是需要过来这里添加kernel信息,不然只会使用全局变量里的Python解释器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装ipykernel</span><br><span class="line">pip install ipykernel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加新的kernel信息到虚拟环境jupyterhub里</span><br><span class="line"><span class="meta">#</span> python -m ipykernel install --user --name &lt;你的环境名&gt; --display-name "&lt;kernel名字&gt;"（你 kernel 的名字，可以在 jupyter 中看到，可以和环境名不一样）</span><br><span class="line"><span class="meta">#</span> 底层实际上就是在$HOME/.local/share/jupyter/kernel/ 下生成三个配置文件,因为用的同一个虚拟环境jupyterhub,所以之后新添加的用户不需要重新install kernel,只需要copy from kernel文件夹里面的信息就可以了</span><br><span class="line"><span class="meta">#</span> kernel.json</span><br><span class="line"><span class="meta">#</span> &#123;</span><br><span class="line"><span class="meta">#</span>  "display_name": "test",</span><br><span class="line"><span class="meta">#</span>  "language": "python",</span><br><span class="line"><span class="meta">#</span>  "argv": [</span><br><span class="line"><span class="meta">#</span>   "/home/bnu/.virtualenvs/jupyterhub/bin/python",</span><br><span class="line"><span class="meta">#</span>   "-m",</span><br><span class="line"><span class="meta">#</span>   "ipykernel_launcher",</span><br><span class="line"><span class="meta">#</span>   "-f",</span><br><span class="line"><span class="meta">#</span>   "&#123;connection_file&#125;"</span><br><span class="line"><span class="meta">#</span>  ]</span><br><span class="line"><span class="meta">#</span> &#125;</span><br><span class="line"><span class="meta">#</span> 可以看到路径是指向我们虚拟环境的</span><br><span class="line">python -m ipykernel install --user --name jupyterhub --display-name "赞"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 给用户配置kernel信息(刚入门shell,水平有限~ 只能麻烦点了ε=(´ο｀*)))唉)</span><br><span class="line"><span class="meta">#</span> 打包kernel信息</span><br><span class="line">tar -czvf kernelinfo.tar.gz ~/.local/share/jupyter/kernels/jupyterhub</span><br><span class="line"><span class="meta">#</span> 取出备用</span><br><span class="line">sz kernelinfo.tar.gz</span><br><span class="line">rm kernelinfo.tar.gz</span><br><span class="line"><span class="meta">#</span> 切换成需要配置的用户</span><br><span class="line"><span class="meta">#</span> 这样做貌似避免了权限问题,不过也可以手动改</span><br><span class="line"><span class="meta">#</span> Linux下更改用户组的命令: sudo chown username:username filename (带上参数-R则是递归修改)</span><br><span class="line">su jpadmin</span><br><span class="line">cd ~</span><br><span class="line">mkdir -p /home/jpadmin/.local/share/jupyter/kernels</span><br><span class="line">cd /home/jpadmin/.local/share/jupyter/kernels</span><br><span class="line">rz &lt;kernelinfo.tar.gz&gt;</span><br><span class="line">tar -xzvf kernelinfo.tar.gz</span><br></pre></td></tr></table></figure><h3 id="template配置"><a href="#template配置" class="headerlink" title="template配置"></a>template配置</h3><p>全局替换: 把准备好的custom文件 放到 /home/.virtualenvs/jupyterhub/lib/python3.5/dist-packages/notebook/static/custom 下进行替换</p><h2 id="启动jupyterhub服务器"><a href="#启动jupyterhub服务器" class="headerlink" title="启动jupyterhub服务器"></a>启动jupyterhub服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">workon jupyterhub</span><br><span class="line">cd /home/jpadmin/.jupyterhub</span><br><span class="line">sudo -i</span><br><span class="line">nohup jupyterhub &amp;</span><br></pre></td></tr></table></figure><h2 id="关闭jupyterhub服务器"><a href="#关闭jupyterhub服务器" class="headerlink" title="关闭jupyterhub服务器"></a>关闭jupyterhub服务器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ps -fA | grep python</span><br><span class="line">kill &lt;pid&gt;</span><br><span class="line"><span class="meta">$</span> ps aux | grep configurable-http-proxy</span><br><span class="line">kill &lt;pid&gt;</span><br></pre></td></tr></table></figure><p>登录测试:</p><p><img src="adminlogin.png" alt="管理员登录图"></p><p>Kernel:</p><p><img src="kernel.png" alt="kernel"></p><p>AdministratorControl:</p><p><img src="control.png" alt="kernel"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu下多用户版jupyterhub部署&quot;&gt;&lt;a href=&quot;#Ubuntu下多用户版jupyterhub部署&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下多用户版jupyterhub部署&quot;&gt;&lt;/a&gt;Ubuntu下多用户版jupyte
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="jupyter" scheme="http://www.superli.tech/categories/Python/jupyter/"/>
    
    
      <category term="Linux" scheme="http://www.superli.tech/tags/Linux/"/>
    
      <category term="Jupyterhub" scheme="http://www.superli.tech/tags/Jupyterhub/"/>
    
  </entry>
  
  <entry>
    <title>解决Ubuntu下matplotlib不能正常显示中文问题</title>
    <link href="http://www.superli.tech/%E8%A7%A3%E5%86%B3Ubuntu%E4%B8%8Bmatplotlib%E4%B8%8D%E8%83%BD%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87/"/>
    <id>http://www.superli.tech/解决Ubuntu下matplotlib不能正常显示中文/</id>
    <published>2018-08-23T11:06:35.000Z</published>
    <updated>2018-10-19T00:58:00.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu下matplotlib不能正常显示中文解决办法"><a href="#Ubuntu下matplotlib不能正常显示中文解决办法" class="headerlink" title="Ubuntu下matplotlib不能正常显示中文解决办法"></a>Ubuntu下matplotlib不能正常显示中文解决办法</h1><p>环境:</p><ul><li>Python 3.6.5</li><li>Linux4.4.0-128-generic_x86_64</li></ul><p><strong>问题描述:</strong> 工作站上部署了一个jupyterhub并安装了matplotlib,当生成图片里label用的是中文字符的时候,出现了下面情况:</p><p><img src="abnormal.png" alt="中文字符不正常显示图"></p><p>并且找了网上最常用的解决方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line"><span class="comment"># 用正常显示负号</span></span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">myfont = FontProperties(fname=<span class="string">'msyh.ttf'</span>)</span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>经过尝试后无效~</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>下载中文字体: <a href="https://pan.baidu.com/s/1pPtPSjk4ToXmpjck6IlKJQ" target="_blank" rel="noopener">simhei.ttf</a> 9rm1</li><li>放入 /usr/share/fonts/</li><li>接着放入matplotlib字体文件夹下: /usr/local/lib/python3.6/site-packages/matplotlib/mpl-data/fonts/ttf/</li><li>修改配置文件:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找配置文件位置</span></span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">print(matplotlib.matplotlib_fname())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用vim打开并作如下修改</span></span><br><span class="line">sudo vim matplotlibbrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加或去除#号修改</span></span><br><span class="line">font-family : sans-serif</span><br><span class="line">font.sans-serif : SIMHEI</span><br></pre></td></tr></table></figure><ul><li>删除缓存文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> cd 到之前启动jupyterhub的用户目录</span><br><span class="line">cd ~</span><br><span class="line">cd .cache/matplotlib/</span><br><span class="line"><span class="meta">#</span> 并删除下面的缓存文件</span><br><span class="line">rm XXX.cache XXX.json</span><br><span class="line">rmdir XXX.cache</span><br></pre></td></tr></table></figure><ul><li>重启kernel</li></ul><p><img src="normal.png" alt="正常显示图"></p><p>发现中文显示正常了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu下matplotlib不能正常显示中文解决办法&quot;&gt;&lt;a href=&quot;#Ubuntu下matplotlib不能正常显示中文解决办法&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu下matplotlib不能正常显示中文解决办法&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="matplotlib" scheme="http://www.superli.tech/categories/Python/matplotlib/"/>
    
    
      <category term="Linux" scheme="http://www.superli.tech/tags/Linux/"/>
    
      <category term="Matplotlib" scheme="http://www.superli.tech/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>解决Vscode右键Runcode中文乱码问题</title>
    <link href="http://www.superli.tech/%E8%A7%A3%E5%86%B3Vscode%E5%8F%B3%E9%94%AERuncode%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://www.superli.tech/解决Vscode右键Runcode中文乱码问题/</id>
    <published>2018-08-23T10:55:52.000Z</published>
    <updated>2018-08-23T11:03:43.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决Vscode右键Runcode中文乱码问题"><a href="#解决Vscode右键Runcode中文乱码问题" class="headerlink" title="解决Vscode右键Runcode中文乱码问题"></a>解决Vscode右键Runcode中文乱码问题</h1><p>产生该问题的原因是Vscode里code-runner插件默认用的不是 <strong>uft-8</strong> 编码,所以我们可以添加一个执行变量</p><ul><li>打开Vscode配置(Ctrl+,)</li><li>在配置文件里添加如下内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"code-runner.executorMap"</span>: &#123;</span><br><span class="line">        <span class="string">"python"</span>: <span class="string">"set PYTHONIOENCODING=utf8 &amp;&amp; $pythonPath $fullFileName"</span>,</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决Vscode右键Runcode中文乱码问题&quot;&gt;&lt;a href=&quot;#解决Vscode右键Runcode中文乱码问题&quot; class=&quot;headerlink&quot; title=&quot;解决Vscode右键Runcode中文乱码问题&quot;&gt;&lt;/a&gt;解决Vscode右键Runcode
      
    
    </summary>
    
      <category term="Vscode" scheme="http://www.superli.tech/categories/Vscode/"/>
    
    
      <category term="Vscode" scheme="http://www.superli.tech/tags/Vscode/"/>
    
      <category term="中文乱码" scheme="http://www.superli.tech/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Pandas.DataFrame内存使用的查看</title>
    <link href="http://www.superli.tech/Pandas-DataFrame%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E7%9A%84%E6%9F%A5%E7%9C%8B/"/>
    <id>http://www.superli.tech/Pandas-DataFrame内存使用的查看/</id>
    <published>2018-08-23T10:49:16.000Z</published>
    <updated>2018-10-19T01:15:01.456Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <strong>DataFrame.info()</strong>, 我们可以获取DataFrame的一些高level信息，譬如数据量、数据类型和内存使用量,这个方法默认情况下返回一个近似的内存使用量，我们设置参数memory_usage为‘deep’来获得准确的内存使用量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info(memory_usage=<span class="string">'deep'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用 &lt;strong&gt;DataFrame.info()&lt;/strong&gt;, 我们可以获取DataFrame的一些高level信息，譬如数据量、数据类型和内存使用量,这个方法默认情况下返回一个近似的内存使用量，我们设置参数memory_usage为‘deep’来获得准确的内存
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="pandas" scheme="http://www.superli.tech/categories/Python/pandas/"/>
    
    
      <category term="Pandas" scheme="http://www.superli.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下Python自动上网脚本的实现</title>
    <link href="http://www.superli.tech/Ubuntu%E4%B8%8BPython%E8%87%AA%E5%8A%A8%E4%B8%8A%E7%BD%91%E8%84%9A%E6%9C%AC%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.superli.tech/Ubuntu下Python自动上网脚本的实现/</id>
    <published>2018-08-23T10:39:39.000Z</published>
    <updated>2018-10-19T01:08:56.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu下实现通过远程登录校园网"><a href="#ubuntu下实现通过远程登录校园网" class="headerlink" title="ubuntu下实现通过远程登录校园网"></a>ubuntu下实现通过远程登录校园网</h1><p>由于我们外部工作站的主机放在保密机房,所以每当工作站需要联网都得申请-&gt;登记-&gt;联网,显得非常麻烦,所以可以通过Python写一个能够实现自动联网的脚本</p><p>需求:</p><ul><li>在不需要进入保密机房的前提下:当有人在工作站上工作需要用到网时,可以使用自己的账号密码登上互联网</li></ul><p>思路: 通过selenium实现打开浏览器,填写上网账号密码登录互联网</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>本机环境:</p><ul><li>Python 3.6.5</li><li>Linux4.4.0-128-generic_x86_64</li></ul><p>不知道为什么selenium不在支持PhantomJs,所以选择了Chrome</p><p>本次使用的有关Chrome信息:</p><ul><li>Chrome安装时间:2018年6月20日09:10:55</li><li>Chrome版本:Google Chrome 67.0.3396.87</li><li>对应安装的ChromeDriver 版本: v2.39</li></ul><p>Chrome for linux <a href="https://www.google.com/chrome/thankyou.html?platform=linux&amp;statcb=1&amp;installdataindex=defaultbrowser" target="_blank" rel="noopener">下载</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装</span><br><span class="line">dpkg -i google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure><p>ChromeDriver <a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">下载</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 存放位置</span><br><span class="line">mv ./chromedriver usr/bin/</span><br><span class="line"><span class="meta">#</span> 添加可执行权限</span><br><span class="line">sudo chmod a+x /usr/bin/chromedriver</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> Chrome与ChromeDriver版本必须得对应,不然程序可能会报错~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 selenium</span></span><br><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><p>源码存放在我们工作站上的gitlab上: <a href="http://172.16.160.219:9090/AsyDogface/AutoSurf" target="_blank" rel="noopener">http://172.16.160.219:9090/AsyDogface/AutoSurf</a></p><p>首次运行报错:selenium.common.exceptions.WebDriverException: Message: ‘chromedriver’ executable needs to be in PATH</p><p>是由于driver版本过高导致的bug,解决方法:</p><ul><li>方法一:重新下载低版本的Chrome以及对应的ChromeDriver</li><li>方法二:修改driver启动option</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法二:修改driver启动option</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--no-sandbox'</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">'--disable-dev-shm-usage'</span>)</span><br><span class="line">driver = webdriver.Chrome(<span class="string">'/path/to/your_chrome_driver_dir/chromedriver'</span>,chrome_options=chrome_options)</span><br></pre></td></tr></table></figure><p>再次尝试启动:</p><p><img src="login.png" alt="login"></p><p>ping一下百度试试:</p><p><img src="ping.png" alt="ping"></p><p>至此,大功告成~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu下实现通过远程登录校园网&quot;&gt;&lt;a href=&quot;#ubuntu下实现通过远程登录校园网&quot; class=&quot;headerlink&quot; title=&quot;ubuntu下实现通过远程登录校园网&quot;&gt;&lt;/a&gt;ubuntu下实现通过远程登录校园网&lt;/h1&gt;&lt;p&gt;由于我们外部
      
    
    </summary>
    
      <category term="Script" scheme="http://www.superli.tech/categories/Script/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="Linux" scheme="http://www.superli.tech/tags/Linux/"/>
    
      <category term="Script" scheme="http://www.superli.tech/tags/Script/"/>
    
  </entry>
  
  <entry>
    <title>Python虚拟环境搭建/迁移</title>
    <link href="http://www.superli.tech/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-%E8%BF%81%E7%A7%BB/"/>
    <id>http://www.superli.tech/Python虚拟环境搭建-迁移/</id>
    <published>2018-08-22T11:54:20.000Z</published>
    <updated>2018-10-19T01:04:57.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VirtualEnv-and-VirtualEnvWrapper-Briefer-Course"><a href="#VirtualEnv-and-VirtualEnvWrapper-Briefer-Course" class="headerlink" title="VirtualEnv and VirtualEnvWrapper Briefer Course"></a>VirtualEnv and VirtualEnvWrapper Briefer Course</h1><blockquote><p>内容包括了虚拟环境的搭建、使用、迁移</p></blockquote><h2 id="什么是VirtualEnv"><a href="#什么是VirtualEnv" class="headerlink" title="什么是VirtualEnv"></a>什么是VirtualEnv</h2><p><strong>VirtualEnv</strong> = Virtual environment       顾名思义就是虚拟环境的意思</p><p><strong>VirtualEnvWrapper</strong>:是对前者提供了一些便利的命令行上的封装</p><h2 id="为什么使用VirtualEnv"><a href="#为什么使用VirtualEnv" class="headerlink" title="为什么使用VirtualEnv"></a>为什么使用VirtualEnv</h2><p>VirtualEnv用于在一台机器上创建多个独立的python运行环境,它的优点:</p><ul><li>可以让每一个python项目单独使用一个环境，而不会影响python系统环境，也不会影响其他项目的环境</li><li>可以选择不同的Python版（系统已安装的）或Packages</li><li>可以在没有root权限的情况下安装新套件，而且它们之间互不影响</li></ul><h2 id="如何食用VirtualEnv"><a href="#如何食用VirtualEnv" class="headerlink" title="如何食用VirtualEnv"></a>如何食用VirtualEnv</h2><blockquote><p>只针对win10下</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#virtualenv安装</span></span><br><span class="line">pip install virtualenv </span><br><span class="line"><span class="comment">#virtualenvwrapper安装</span></span><br><span class="line">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:virtualenvwrapper需要配置所有虚拟环境的存放目录:<em>WORKON_HOME</em></p><p><img src="workonhome.png" alt="图片"></p><h3 id="VirtualEnv食用"><a href="#VirtualEnv食用" class="headerlink" title="VirtualEnv食用"></a>VirtualEnv食用</h3><p><strong>虚拟环境的创建:</strong></p><ol><li>默认Python版本创建虚拟环境:<ul><li>cd到需要创建虚拟环境的目录</li><li>创建虚拟环境</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtualenv &lt;env_name&gt;</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">virtualenv --no-site-packages &lt;env_name&gt;</span><br><span class="line"><span class="comment"># –no-site-packages表示不包括系统全局的Python安装包，这样会更令环境更干净</span></span><br></pre></td></tr></table></figure><ol start="2"><li>自定义Python版本创建虚拟环境<ul><li>首先安装需要的Python版本</li><li>cd到需要创建虚拟环境的目录</li><li>指定virtualenv中的python版本,并创建虚拟环境</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv --no-site-packages --python=<span class="number">2.7</span>  &lt;envname&gt;</span><br></pre></td></tr></table></figure><p><strong>虚拟环境的激活</strong>:</p><ol><li>cd到你创建的虚拟环境目录下</li><li>激活环境</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Script\activate  (<span class="keyword">or</span> Script\activate.bat)</span><br></pre></td></tr></table></figure><p>这时候你可以看到命令行前面多出了你虚拟环境的名字,代表成功激活虚拟环境</p><p><strong>虚拟环境的退出</strong>:</p><p>直接在该环境中使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><strong>删除虚拟环境</strong>:</p><p>直接删除虚拟环境所在的文件夹就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r &lt;target envname&gt;</span><br></pre></td></tr></table></figure><h2 id="VirtualEnvWrapper食用"><a href="#VirtualEnvWrapper食用" class="headerlink" title="VirtualEnvWrapper食用"></a>VirtualEnvWrapper食用</h2><blockquote><p>VirtualEnvWrapper下创建的虚拟环境默认都是干净的,就像Virtualenv下执行了–no-site-packages命令一样</p></blockquote><p><strong>创建虚拟环境</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv &lt;envname&gt;</span><br></pre></td></tr></table></figure><p><strong>列出已有的虚拟环境</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon</span><br></pre></td></tr></table></figure><p><strong>切换虚拟环境</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workon &lt;envname&gt;</span><br></pre></td></tr></table></figure><p><strong>退出虚拟环境</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><p><strong>删除虚拟环境</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmvirtualenv &lt;envname&gt;</span><br></pre></td></tr></table></figure><h2 id="VSCode下虚拟环境的迁移"><a href="#VSCode下虚拟环境的迁移" class="headerlink" title="VSCode下虚拟环境的迁移"></a>VSCode下虚拟环境的迁移</h2><h3 id="首先配置Virtualenv"><a href="#首先配置Virtualenv" class="headerlink" title="首先配置Virtualenv"></a>首先配置Virtualenv</h3><p>目标电脑必须安装了相同的Python版本以及pip和Virtualenv,然后根据情况选择:</p><p><strong>方法一</strong>:</p><ul><li>当没有网或者网络不好的情况下</li><li>直接将本地env1里的文件copy到目标电脑env2下,可以正常使用,显然这是不好的…</li></ul><p><strong>方法二</strong>:</p><ul><li>进入需要迁移的虚拟环境里</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>将包依赖信息保存在requirements.txt文件中,文件结构如下图:</p><p><img src="requirements.png" alt="图片"></p><ul><li>把该文档copy到目标电脑虚拟环境目录下,执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入虚拟环境</span></span><br><span class="line">workon &lt;target envname&gt;</span><br><span class="line"><span class="comment">#先卸载一遍,以防原来环境里有残留</span></span><br><span class="line">pip uninstall -ry requirements.txt</span><br><span class="line"><span class="comment">#再执行安装(没安装成功的话可能是包依赖冲突,手动调整下文档里包的位置即可)</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="然后配置VSCode"><a href="#然后配置VSCode" class="headerlink" title="然后配置VSCode"></a>然后配置VSCode</h4><ul><li>首先配置虚拟环境根目录</li></ul><p><img src="vscode下env路径.png" alt="图片"></p><ul><li>重启VSCode</li><li>打开VSCode控制面板</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl+shift+P</span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python:Select Interpreter</span><br></pre></td></tr></table></figure><ul><li>选择虚拟环境</li></ul><p><img src="选择虚拟环境.png" alt="图片"></p><ul><li>至此,大功告成</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VirtualEnv-and-VirtualEnvWrapper-Briefer-Course&quot;&gt;&lt;a href=&quot;#VirtualEnv-and-VirtualEnvWrapper-Briefer-Course&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="virtualenv" scheme="http://www.superli.tech/categories/Python/virtualenv/"/>
    
    
      <category term="VirtualEnv" scheme="http://www.superli.tech/tags/VirtualEnv/"/>
    
      <category term="VirtualEnvWrapper" scheme="http://www.superli.tech/tags/VirtualEnvWrapper/"/>
    
  </entry>
  
  <entry>
    <title>搭建属于自己的Pipserver</title>
    <link href="http://www.superli.tech/%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84Pipserver/"/>
    <id>http://www.superli.tech/搭建属于自己的Pipserver/</id>
    <published>2018-08-22T11:49:27.000Z</published>
    <updated>2018-10-19T01:10:42.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Pypiserver"><a href="#Python-Pypiserver" class="headerlink" title="Python Pypiserver"></a><a href="https://pypi.org/project/pypiserver/" target="_blank" rel="noopener">Python Pypiserver</a></h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Windows10</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pypiserver</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ul><li>创建包仓库,eg D:/packages</li><li>把下载好的python包放到创建好的仓库里</li><li>启动pypi-server服务器,并指定仓库目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Will listen to all IPs.</span></span><br><span class="line">pypi-server -p <span class="number">8080</span> D:/packages</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li>配置pip.ini文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=http://&lt;server_ip&gt;:8080/simple</span><br><span class="line">trusted-host=&lt;server_ip&gt;</span><br><span class="line">no-warn-script-location=False</span><br></pre></td></tr></table></figure><ul><li>从服务器下载packages</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install &lt;package&gt;</span><br></pre></td></tr></table></figure><ul><li>搜索包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search --index http://&lt;server_ip&gt;:8080</span><br></pre></td></tr></table></figure><p><strong>值得注意的是:</strong> 想要search正常工作,url后面不能以 <em>simple</em> 结尾</p><h2 id="获取帮助信息"><a href="#获取帮助信息" class="headerlink" title="获取帮助信息"></a>获取帮助信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pypi-server --help</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Pypiserver&quot;&gt;&lt;a href=&quot;#Python-Pypiserver&quot; class=&quot;headerlink&quot; title=&quot;Python Pypiserver&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://pypi.org/project/p
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="pip" scheme="http://www.superli.tech/categories/Python/pip/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="Pip" scheme="http://www.superli.tech/tags/Pip/"/>
    
  </entry>
  
  <entry>
    <title>Python自动化Word、Excel</title>
    <link href="http://www.superli.tech/Python%E8%87%AA%E5%8A%A8%E5%8C%96Word%E3%80%81Excel/"/>
    <id>http://www.superli.tech/Python自动化Word、Excel/</id>
    <published>2018-08-22T11:43:49.000Z</published>
    <updated>2018-10-19T01:05:18.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python自动化Wrod和Excel入门培训"><a href="#Python自动化Wrod和Excel入门培训" class="headerlink" title="Python自动化Wrod和Excel入门培训"></a>Python自动化Wrod和Excel入门培训</h1><h2 id="阅读文档之前你应该"><a href="#阅读文档之前你应该" class="headerlink" title="阅读文档之前你应该"></a>阅读文档之前你应该</h2><ul><li>在window环境下</li><li>熟悉Python</li><li>了解Word和Excel</li><li>结合./doc和./src文件下的测试文档和源文件进行学习使用</li></ul><h2 id="培训完以后你应该具备"><a href="#培训完以后你应该具备" class="headerlink" title="培训完以后你应该具备"></a>培训完以后你应该具备</h2><ul><li style="list-style: none"><input type="checkbox" checked> 能够使用Python对Work进行段落、图片、表格插入，以及简单的样式应用</li><li style="list-style: none"><input type="checkbox" checked> 能够使用Python对Excel进行简单的数据导入导出,获取合并单元格的值</li><li style="list-style: none"><input type="checkbox" checked> 能够在数据库、Excel和Word之间相互导入导出数据</li></ul><h2 id="Python自动化之Word"><a href="#Python自动化之Word" class="headerlink" title="Python自动化之Word"></a>Python自动化之Word</h2><h3 id="安装-python-docx"><a href="#安装-python-docx" class="headerlink" title="安装(python-docx)"></a>安装(python-docx)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-docx</span><br></pre></td></tr></table></figure><h3 id="快速入门-auto-Word"><a href="#快速入门-auto-Word" class="headerlink" title="快速入门(auto_Word)"></a>快速入门(auto_Word)</h3><h4 id="打开一份文档"><a href="#打开一份文档" class="headerlink" title="打开一份文档"></a>打开一份文档</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="comment"># 打开一份空白的模板,这几乎和新建一份默认设置的空白文档一样</span></span><br><span class="line">document = Document()</span><br><span class="line"><span class="comment"># 打开一份已有的文档</span></span><br><span class="line"><span class="comment"># document = Document('file_path')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对文档操作完以后记得保存</span></span><br><span class="line">document.save(<span class="string">'file_path'</span>)</span><br></pre></td></tr></table></figure><h4 id="添加标题"><a href="#添加标题" class="headerlink" title="添加标题"></a>添加标题</h4><p>标题一共分为9级(1~9)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认一级标题</span></span><br><span class="line">document.add_heading(<span class="string">'一级标题'</span>)</span><br><span class="line">document.add_heading(<span class="string">'二级标题'</span>, level=<span class="number">2</span>)</span><br><span class="line">document.add_heading(<span class="string">'三级标题'</span>, level=<span class="number">3</span>)</span><br><span class="line">document.add_heading(<span class="string">'四级标题'</span>, level=<span class="number">4</span>)</span><br><span class="line">document.add_heading(<span class="string">'五级标题'</span>, level=<span class="number">5</span>)</span><br><span class="line">document.add_heading(<span class="string">'六级标题'</span>, level=<span class="number">6</span>)</span><br><span class="line">document.add_heading(<span class="string">'七级标题'</span>, level=<span class="number">7</span>)</span><br><span class="line">document.add_heading(<span class="string">'八级标题'</span>, level=<span class="number">8</span>)</span><br><span class="line">document.add_heading(<span class="string">'九级标题'</span>, level=<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p><strong>段落的添加</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加到最后</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">'after'</span>)</span><br><span class="line"><span class="comment"># 添加到之前</span></span><br><span class="line">prior_paragraph = paragraph.insert_paragraph_before(<span class="string">'before'</span>)</span><br></pre></td></tr></table></figure><p><strong>段落样式的应用</strong>:</p><blockquote><p>可通过add_run()方法来实现段落的拆分,字体样式应用(比如:粗体和斜体)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 段落样式</span></span><br><span class="line">document.add_paragraph(<span class="string">'一个简单的段落样式.'</span>, style=<span class="string">'ListBullet'</span>)</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">'Lorem ipsum dolor sit amet.'</span>)</span><br><span class="line">paragraph.style = <span class="string">'ListBullet'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过add_run()方法来实现</span></span><br><span class="line"><span class="comment"># 把一个段落分开运行</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">'我是 '</span>)</span><br><span class="line">paragraph.add_run(<span class="string">'奥特曼.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用粗体和斜体</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">'我 '</span>)</span><br><span class="line">paragraph.add_run(<span class="string">'是 '</span>).bold = <span class="keyword">True</span></span><br><span class="line">paragraph.add_run(<span class="string">'奥 '</span>).italic = <span class="keyword">True</span></span><br><span class="line">paragraph.add_run(<span class="string">' 特曼.'</span>)</span><br><span class="line"><span class="comment"># 也可以</span></span><br><span class="line">run = paragraph.add_run(<span class="string">'是 '</span>)</span><br><span class="line">run.bold = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符样式,包括其字体，大小，颜色，粗体，斜体等</span></span><br><span class="line">paragraph = document.add_paragraph(<span class="string">'一样, '</span>)</span><br><span class="line">paragraph.add_run(<span class="string">'很明显不一样嘛.'</span>, <span class="string">'Emphasis'</span>)</span><br><span class="line"><span class="comment"># 也可以</span></span><br><span class="line">paragraph_6 = document.add_paragraph(<span class="string">'一样, '</span>)</span><br><span class="line">run = paragraph_6.add_run(<span class="string">'很明显不一样嘛.'</span>)</span><br><span class="line">run.style = <span class="string">'Emphasis'</span></span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页</span></span><br><span class="line">document.add_page_break()</span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.add_picture(<span class="string">'../img/协同.png'</span>, width=Inches(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p><strong>表格的创建</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表格</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表格</span></span><br><span class="line">table = document.add_table(rows=<span class="number">2</span>, cols=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 获取单个表格元素</span></span><br><span class="line">cell = table.cell(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 给表格元素传值</span></span><br><span class="line">cell.text = <span class="string">'第一行,第二列'</span></span><br><span class="line"><span class="comment"># 获取一行元素 just like list,并传值</span></span><br><span class="line"><span class="comment"># 获取第二行元素</span></span><br><span class="line">row = table.rows[<span class="number">1</span>]</span><br><span class="line">row.cells[<span class="number">0</span>].text = <span class="string">'第二行,第一列'</span></span><br><span class="line">row.cells[<span class="number">1</span>].text = <span class="string">'第二行,第二列'</span></span><br></pre></td></tr></table></figure><p><strong>一个模拟从数据库导入数据到word表格里的实例</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">document.add_paragraph(<span class="string">'表'</span>)</span><br><span class="line"><span class="comment"># 假装这是数据库取出来的数据</span></span><br><span class="line">data_list = [&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"张麻子"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="string">"18"</span>,</span><br><span class="line">    <span class="string">"描述"</span>:<span class="string">"脸上有麻子"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"赵四"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="string">"998"</span>,</span><br><span class="line">    <span class="string">"描述"</span>:<span class="string">"尼古拉斯赵四"</span>,</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个表格</span></span><br><span class="line">table = document.add_table(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">table.style = <span class="string">'LightShading-Accent2'</span></span><br><span class="line"><span class="comment"># 填写标头</span></span><br><span class="line">heading_cells = table.rows[<span class="number">0</span>].cells</span><br><span class="line">heading_cells[<span class="number">0</span>].text = <span class="string">'name'</span></span><br><span class="line">heading_cells[<span class="number">1</span>].text = <span class="string">'age'</span></span><br><span class="line">heading_cells[<span class="number">2</span>].text = <span class="string">'描述'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把数据导入到表格里</span></span><br><span class="line"><span class="keyword">for</span> items <span class="keyword">in</span> data_list:</span><br><span class="line">    row = table_1.add_row()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        row.cells[i].text = items[item]</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="了解更多-auto-word"><a href="#了解更多-auto-word" class="headerlink" title="了解更多(auto_word)"></a>了解更多(auto_word)</h3><p>如果你对python自动化word很感兴趣,想进一步提升请<a href="http://python-docx.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">猛击这里</a></p><h2 id="Python自动化之Excel"><a href="#Python自动化之Excel" class="headerlink" title="Python自动化之Excel"></a>Python自动化之Excel</h2><h3 id="安装-xlrd、xlwt"><a href="#安装-xlrd、xlwt" class="headerlink" title="安装(xlrd、xlwt)"></a>安装(xlrd、xlwt)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xlrd 涌入内容读取, xlwr 用于内容写入</span></span><br><span class="line">pip install xlrd</span><br><span class="line">pip install xlwt</span><br></pre></td></tr></table></figure><h3 id="快速入门-auto-Excel"><a href="#快速入门-auto-Excel" class="headerlink" title="快速入门(auto_Excel)"></a>快速入门(auto_Excel)</h3><h3 id="xlrd使用"><a href="#xlrd使用" class="headerlink" title="xlrd使用"></a>xlrd使用</h3><h4 id="获取Excel文件"><a href="#获取Excel文件" class="headerlink" title="获取Excel文件"></a>获取Excel文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workbook = xlrd.open_workbook(<span class="string">'excel_file_path'</span>)</span><br></pre></td></tr></table></figure><h4 id="获取工作表名称"><a href="#获取工作表名称" class="headerlink" title="获取工作表名称"></a>获取工作表名称</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有工作表名称</span></span><br><span class="line">workbook_name_list = workbook.sheet_name()</span><br><span class="line"><span class="comment"># 根据索引获取sheet名称</span></span><br><span class="line">sheet2_name = workbook.sheet_name()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="获取工作表-三种方式"><a href="#获取工作表-三种方式" class="headerlink" title="获取工作表(三种方式)"></a>获取工作表(三种方式)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sheet_1 = workbook.sheets()[<span class="number">0</span>]     <span class="comment">#通过索引顺序获取</span></span><br><span class="line">sheet_2 = workbook.sheet_by_index(<span class="number">1</span>)     <span class="comment">#通过索引顺序获取</span></span><br><span class="line">sheet = workbook.sheet_by_name(u‘Sheet_name‘)   <span class="comment">#通过Excel表名称</span></span><br></pre></td></tr></table></figure><h4 id="常用的sheet对象的属性和方法"><a href="#常用的sheet对象的属性和方法" class="headerlink" title="常用的sheet对象的属性和方法"></a>常用的sheet对象的属性和方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取sheet名称</span></span><br><span class="line">sheet_name = sheet.name</span><br><span class="line"><span class="comment"># 获取sheet行数</span></span><br><span class="line">sheet_rows = sheet.nrows</span><br><span class="line"><span class="comment"># 获取sheet列数</span></span><br><span class="line">sheet_cols = sheet.ncols</span><br><span class="line"><span class="comment"># 获取sheet整行的值(索引)</span></span><br><span class="line">rows = sheet.row_values(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取sheet整列的值(索引)</span></span><br><span class="line">cols = sheet.col_values(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定单元格的内容</span></span><br><span class="line"><span class="comment"># 方法一(x,y表示二维索引坐标):</span></span><br><span class="line">cell_data = sheet.cell(x,y).value</span><br><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line">cell_data = sheet.cell_value(x,y)</span><br><span class="line"><span class="comment"># 方法三:</span></span><br><span class="line">cell_data = sheet.row(x)[y].value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取单元格内容的数据类型(解决获取date类型为浮点型的引子)</span></span><br><span class="line"><span class="comment"># 返回值说明: 0 empty,1 string, 2 number, 3 date, 4 boolean, 5 error</span></span><br><span class="line">cell_type = sheet.cell(x,y).ctype</span><br></pre></td></tr></table></figure><h4 id="获取单元内容为日期类型的方式"><a href="#获取单元内容为日期类型的方式" class="headerlink" title="获取单元内容为日期类型的方式"></a>获取单元内容为日期类型的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date_value = xlrd.xldate_as_tuple(sheet_2.cell_value(<span class="number">1</span>,<span class="number">2</span>),workbook.datemode)</span><br><span class="line">result = date(*date_value[:<span class="number">3</span>]).strftime(<span class="string">r'%Y/%m/%d'</span>)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h4 id="扩展-获取合并单元格的内容"><a href="#扩展-获取合并单元格的内容" class="headerlink" title="(扩展)获取合并单元格的内容"></a>(扩展)获取合并单元格的内容</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只获取合并单元格的内容</span></span><br><span class="line"><span class="comment"># 问题,只能取到行/列合并的第一个索引值</span></span><br><span class="line"><span class="comment"># 解决代码</span></span><br><span class="line">merge = []</span><br><span class="line"><span class="keyword">for</span> (rlow,rhigh,clow,chigh) <span class="keyword">in</span> sheet_2.merged_cells:</span><br><span class="line">    merge.append([rlow,clow])</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> merge:</span><br><span class="line">    print(sheet_2.cell_value(index[<span class="number">0</span>],index[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h3 id="xlwt使用"><a href="#xlwt使用" class="headerlink" title="xlwt使用"></a>xlwt使用</h3><h4 id="sheet的创建"><a href="#sheet的创建" class="headerlink" title="sheet的创建"></a>sheet的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建工作簿</span></span><br><span class="line">workbook = xlwt.Workbook()</span><br><span class="line"><span class="comment"># 创建sheet,第二参数用于确认同一个cell单元是否可以重设值</span></span><br><span class="line">sheet_1 = workbook.add_sheet(<span class="string">'sheet_name'</span>,cell_overwrite_ok=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># 完成编辑后记得保存</span></span><br><span class="line">workbook.save(<span class="string">'file_path'</span>)</span><br></pre></td></tr></table></figure><h4 id="内容的写入"><a href="#内容的写入" class="headerlink" title="内容的写入"></a>内容的写入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x,y 表行索引, y,h 表列索引 , string表要输入的字符串, style表字符串样式,如果只有两个参数x,y则表示第x+1行第y+1列</span></span><br><span class="line">sheet.write(x, y, h, w, string, sytle)</span><br></pre></td></tr></table></figure><h4 id="单元格的合并"><a href="#单元格的合并" class="headerlink" title="单元格的合并"></a>单元格的合并</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和xlrd不一样的地方是,x,y,h,w顾头又顾尾!!!</span></span><br><span class="line"><span class="comment"># 和xlrd不一样的地方是,x,y,h,w顾头又顾尾!!!</span></span><br><span class="line"><span class="comment"># 和xlrd不一样的地方是,x,y,h,w顾头又顾尾!!!</span></span><br><span class="line"><span class="comment"># 直接写入一个合并的单元格</span></span><br><span class="line">sheet.write_merge(x, y, h, w, string, sytle)</span><br></pre></td></tr></table></figure><h4 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h4><blockquote><p>案例来自<a href="https://www.cnblogs.com/linyfeng/p/7123423.html" target="_blank" rel="noopener">这里</a>,例子非常棒,但是由于时间有点早,本人大胆进行了加工改良</p></blockquote><p><strong>请生成如下图格式的Excel文件</strong>:</p><p><img src="xlwt练习_01.png" alt="Excel写入练习 图片_01"></p><p><strong>源码</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置字体的样式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_style</span><span class="params">(name,height,bold=False)</span>:</span></span><br><span class="line">    style = xlwt.XFStyle() <span class="comment"># 初始化样式</span></span><br><span class="line">    font = xlwt.Font() <span class="comment"># 为样式创建字体</span></span><br><span class="line">    font.name = name <span class="comment"># 'Times New Roman'</span></span><br><span class="line">    font.bold = bold</span><br><span class="line">    font.color_index = <span class="number">4</span></span><br><span class="line">    font.height = height</span><br><span class="line">    style.font = font</span><br><span class="line">    <span class="comment"># 这部分设置居中格式</span></span><br><span class="line">    alignment = xlwt.Alignment()</span><br><span class="line">    alignment.horz = xlwt.Alignment.HORZ_CENTER    <span class="comment">#水平居中</span></span><br><span class="line">    alignment.vert = xlwt.Alignment.VERT_CENTER    <span class="comment">#垂直居中</span></span><br><span class="line">    style.alignment = alignment</span><br><span class="line">    <span class="keyword">return</span> style</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成excel文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''创建第一个sheet:sheet1'''</span></span><br><span class="line">    workbook = xlwt.Workbook() <span class="comment">#创建工作簿</span></span><br><span class="line">    sheet1 = workbook.add_sheet(<span class="string">'sheet1'</span>,cell_overwrite_ok=<span class="keyword">True</span>) <span class="comment">#创建sheet</span></span><br><span class="line">    row0 = [<span class="string">'业务'</span>,<span class="string">'状态'</span>,<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'广州'</span>,<span class="string">'深圳'</span>,<span class="string">'状态小计'</span>,<span class="string">'合计'</span>]</span><br><span class="line">    column0 = [<span class="string">'机票'</span>,<span class="string">'船票'</span>,<span class="string">'火车票'</span>,<span class="string">'汽车票'</span>,<span class="string">'其它'</span>]</span><br><span class="line">    status = [<span class="string">'预订'</span>,<span class="string">'出票'</span>,<span class="string">'退票'</span>,<span class="string">'业务小计'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成第一行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(row0)):</span><br><span class="line">        sheet1.write(<span class="number">0</span>,i,row0[i],set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>,<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成第一列和最后一列(合并4行)</span></span><br><span class="line">    i, j = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">4</span>*len(column0) <span class="keyword">and</span> j &lt; len(column0):</span><br><span class="line">        sheet1.write_merge(i,i+<span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span>,column0[j],set_style(<span class="string">'Arial'</span>,<span class="number">220</span>,<span class="keyword">True</span>)) <span class="comment">#第一列</span></span><br><span class="line">        sheet1.write_merge(i,i+<span class="number">3</span>,<span class="number">7</span>,<span class="number">7</span>) <span class="comment">#最后一列"合计"</span></span><br><span class="line">        i += <span class="number">4</span></span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">    sheet1.write_merge(<span class="number">21</span>,<span class="number">21</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">u'合计'</span>,set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>,<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成第二列</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">4</span>*len(column0):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(status)):</span><br><span class="line">            sheet1.write(j+i+<span class="number">1</span>, <span class="number">1</span>, status[j])</span><br><span class="line">        i += <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    workbook.save(<span class="string">'../doc/demo1.xls'</span>) <span class="comment">#保存文件</span></span><br><span class="line">write_excel()</span><br></pre></td></tr></table></figure><h4 id="再次牛刀小试"><a href="#再次牛刀小试" class="headerlink" title="再次牛刀小试"></a>再次牛刀小试</h4><p><strong>请生成如下图格式的Excel文件</strong>:</p><p><img src="xlwt练习_02.png" alt="Excel写入练习 图片_02"></p><p><strong>源码</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成exce文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_excel_two</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''创建第二个sheet:sheet2'''</span></span><br><span class="line">    workbook = xlwt.Workbook() <span class="comment">#创建工作簿</span></span><br><span class="line">    sheet2 = workbook.add_sheet(<span class="string">'sheet2'</span>,cell_overwrite_ok=<span class="keyword">True</span>) <span class="comment">#创建sheet2</span></span><br><span class="line">    row0 = [<span class="string">'姓名'</span>,<span class="string">'年龄'</span>,<span class="string">'出生日期'</span>,<span class="string">'爱好'</span>,<span class="string">'关系'</span>]</span><br><span class="line">    column0 = [<span class="string">'小杰'</span>,<span class="string">'小胖'</span>,<span class="string">'小明'</span>,<span class="string">'大神'</span>,<span class="string">'大仙'</span>,<span class="string">'小敏'</span>,<span class="string">'无名'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成第一行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(row0)):</span><br><span class="line">        sheet2.write(<span class="number">0</span>,i,row0[i],set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>,<span class="keyword">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#生成第一列</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(column0)):</span><br><span class="line">        sheet2.write(i+<span class="number">1</span>,<span class="number">0</span>,column0[i],set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>))</span><br><span class="line"></span><br><span class="line">    sheet2.write(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'1911/11/11'</span>,set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>))</span><br><span class="line">    sheet2.write_merge(<span class="number">7</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="string">'暂无'</span>,set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>)) <span class="comment">#合并列单元格</span></span><br><span class="line">    sheet2.write_merge(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="string">'好朋友'</span>,set_style(<span class="string">'Times New Roman'</span>,<span class="number">220</span>)) <span class="comment">#合并行单元格</span></span><br><span class="line"></span><br><span class="line">    workbook.save(<span class="string">'../doc/demo2.xls'</span>) <span class="comment">#保存文件</span></span><br><span class="line">write_excel_two()</span><br></pre></td></tr></table></figure><h3 id="了解更多-auto-excel"><a href="#了解更多-auto-excel" class="headerlink" title="了解更多(auto_excel)"></a>了解更多(auto_excel)</h3><p>如果你对python自动化Excel很感兴趣,想进一步提升请<a href="http://www.python-excel.org/" target="_blank" rel="noopener">猛击这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python自动化Wrod和Excel入门培训&quot;&gt;&lt;a href=&quot;#Python自动化Wrod和Excel入门培训&quot; class=&quot;headerlink&quot; title=&quot;Python自动化Wrod和Excel入门培训&quot;&gt;&lt;/a&gt;Python自动化Wrod和Exc
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="Word" scheme="http://www.superli.tech/tags/Word/"/>
    
      <category term="Excel" scheme="http://www.superli.tech/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>Python多进程简单上手</title>
    <link href="http://www.superli.tech/Python%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B/"/>
    <id>http://www.superli.tech/Python多进程简单上手/</id>
    <published>2018-08-22T11:34:14.000Z</published>
    <updated>2018-10-19T01:04:13.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Multiprocessing"><a href="#Python-Multiprocessing" class="headerlink" title="Python Multiprocessing"></a>Python Multiprocessing</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python 中多线程无法利用多核优势,所以</p><ul><li>面对CPU密集型任务时,Multiprocessing无疑时最好的选择</li><li>面对I/O密集型任务时,可以采用多线程或协程</li></ul><blockquote><p>附:<br><a href="https://docs.python.org/3/library/multiprocessing.html" target="_blank" rel="noopener">Python3 + Multiprocessing官档</a><br><a href="https://www.cnblogs.com/smallmars/p/7093603.html" target="_blank" rel="noopener">参考文献</a></p></blockquote><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p><strong>需要注意的一点:</strong> 进程之间的数据不共享</p><p>Multiprocessing模块常用的组件:</p><ul><li>Process: 创建进程的类</li><li>Queue: 队列,用于进程间通信</li><li>Pipe: 管道,另一种实现进程间通信的类方法</li><li>Lock: 进程同步锁,用于确保进程间数据安全</li><li>Pool: 进程池,维护一定的数量的进程</li></ul><h3 id="Process类"><a href="#Process类" class="headerlink" title="Process类"></a>Process类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由该类实例化得到的对象，表示一个子进程中的任务（尚未启动）</span></span><br><span class="line">Process([group [, target [, name [, args [, kwargs]]]]])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    group: 值始终为None</span></span><br><span class="line"><span class="string">    target: 调用对象，即子进程要执行的任务</span></span><br><span class="line"><span class="string">    args: 调用对象的位置参数元组，args=(1,2,'zhangsan',)</span></span><br><span class="line"><span class="string">    kwargs: 调用对象的字典,kwargs=&#123;'name':'zhangsan','age':3&#125;</span></span><br><span class="line"><span class="string">    name: 子进程的名称</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><table><thead><tr><th>func</th><th>description</th></tr></thead><tbody><tr><td>p.start()</td><td>启动进程，并调用该子进程中的p.run()</td></tr><tr><td>p.run()</td><td>进程启动时运行的方法，正是它去调用target指定的函数，我们自定义类的类中一定要实现该方法</td></tr><tr><td>p.terminate()</td><td>强制终止进程p，不会进行任何清理操作，如果p创建了子进程，该子进程就成了僵尸进程，使用该方法需要特别小心这种情况。如果p还保存了一个锁那么也将不会被释放，进而导致死锁</td></tr><tr><td>p.is_alive()</td><td>如果p仍然运行，返回True</td></tr><tr><td>p.join([timeout])</td><td>主线程等待p终止（强调：是主线程处于等的状态，而p是处于运行的状态）。timeout是可选的超时时间，需要强调的是，p.join只能join住start开启的进程，而不能join住run开启的进程</td></tr></tbody></table><h4 id="常用的属性"><a href="#常用的属性" class="headerlink" title="常用的属性"></a>常用的属性</h4><table><thead><tr><th>func</th><th>description</th></tr></thead><tbody><tr><td>p.daemon</td><td>默认值为False，如果设为True，代表p为后台运行的守护进程，当p的父进程终止时，p也随之终止，并且设定为True后，p不能创建自己的新进程，必须在p.start()之前设置</td></tr><tr><td>p.name</td><td>进程的名称</td></tr><tr><td>p.pid</td><td>进程的pid</td></tr><tr><td>p.exitcode</td><td>进程在运行时为None、如果为–N，表示被信号N结束(了解即可)</td></tr><tr><td>p.authkey</td><td>进程的身份验证键,默认是由os.urandom()随机生成的32字符的字符串。这个键的用途是为涉及网络连接的底层进程间通信提供安全性，这类连接只有在具有相同的身份验证键时才能成功（了解即可）</td></tr></tbody></table><h4 id="Process类的使用"><a href="#Process类的使用" class="headerlink" title="Process类的使用"></a>Process类的使用</h4><p><strong>方法一:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">piao</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'say %s '</span> %name)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    print(<span class="string">'%s say end'</span> %name)</span><br><span class="line"></span><br><span class="line">p1=Process(target=piao,args=(<span class="string">'f'</span>,)) <span class="comment">#必须加,号</span></span><br><span class="line">p2=Process(target=piao,args=(<span class="string">'u'</span>,))</span><br><span class="line">p3=Process(target=piao,args=(<span class="string">'c'</span>,))</span><br><span class="line">p4=Process(target=piao,args=(<span class="string">'k'</span>,))</span><br><span class="line"></span><br><span class="line">p1.start()</span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line">print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure><p><strong>方法二:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'say %s'</span> %self.name)</span><br><span class="line"></span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">        print(<span class="string">'%s say end'</span> %self.name)</span><br><span class="line"></span><br><span class="line">p1=Piao(<span class="string">'f'</span>)</span><br><span class="line">p2=Piao(<span class="string">'u'</span>)</span><br><span class="line">p3=Piao(<span class="string">'c'</span>)</span><br><span class="line">p4=Piao(<span class="string">'k'</span>)</span><br><span class="line"></span><br><span class="line">p1.start() <span class="comment">#start会自动调用run</span></span><br><span class="line">p2.start()</span><br><span class="line">p3.start()</span><br><span class="line">p4.start()</span><br><span class="line">print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure><p><em>注意：在 windows 中 Process() 必须放到 if <strong>name</strong> == ‘<strong>main</strong>‘:下</em></p><p><strong>关于守护进程的例子:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piao</span><span class="params">(Process)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name=name</span><br><span class="line">        super().__init__()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'%s is piaoing'</span> %self.name)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'%s is piao end'</span> %self.name)</span><br><span class="line"></span><br><span class="line">p=Piao(<span class="string">'e'</span>)</span><br><span class="line">p.daemon=<span class="keyword">True</span> <span class="comment">#一定要在p.start()前设置,设置p为守护进程,禁止p创建子进程,并且父进程死,p跟着一起死</span></span><br><span class="line">p.start()</span><br><span class="line">p.join(<span class="number">0.0001</span>) <span class="comment">#等待p停止,等0.0001秒就不再等了</span></span><br><span class="line">print(<span class="string">'开始'</span>)</span><br></pre></td></tr></table></figure><h3 id="Queue类"><a href="#Queue类" class="headerlink" title="Queue类"></a>Queue类</h3><p>进程间通信方式的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建共享的进程队列，Queue是多进程安全的队列，可以使用Queue实现多进程之间的数据传递。</span></span><br><span class="line">Queue([maxsize]) <span class="comment"># maxsize是队列中允许最大项数，省略则无大小限制</span></span><br></pre></td></tr></table></figure><h4 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h4><table><thead><tr><th>func</th><th>description</th></tr></thead><tbody><tr><td>q.put()</td><td>插入数据到队列中</td></tr><tr><td>q.get()</td><td>从队列读取并且删除一个元素</td></tr><tr><td>q.get_nowait()</td><td>同q.get(False)</td></tr><tr><td>q.put_nowait()</td><td>同q.put(False)</td></tr><tr><td>q.empty()</td><td>调用此方法时q为空则返回True，该结果不可靠，比如在返回True的过程中，如果队列中又加入了项目</td></tr><tr><td>q.full()</td><td>调用此方法时q已满则返回True，该结果不可靠，比如在返回True的过程中，如果队列中的项目被取走</td></tr><tr><td>q.qsize()</td><td>返回队列中目前项目的正确数量，结果也不可靠，理由同q.empty()和q.full()一样</td></tr></tbody></table><p><strong>说明:</strong> put()还有两个可选参数：blocked和timeout。如果blocked为True（默认值），并且timeout为正值，该方法会阻塞timeout指定的时间，直到该队列有剩余的空间。如果超时，会抛出Queue.Full异常。如果blocked为False，但该Queue已满，会立即抛出Queue.Full异常,get()与之相反。</p><h4 id="Queue的简单使用"><a href="#Queue的简单使用" class="headerlink" title="Queue的简单使用"></a>Queue的简单使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">q=Queue(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#put ,get ,put_nowait,get_nowait,full,empty</span></span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">q.put(<span class="number">3</span>)</span><br><span class="line">print(q.full()) <span class="comment">#满了</span></span><br><span class="line"></span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.get())</span><br><span class="line">print(q.empty()) <span class="comment">#空了</span></span><br></pre></td></tr></table></figure><h4 id="基于Queue实现生产者消费者模型"><a href="#基于Queue实现生产者消费者模型" class="headerlink" title="基于Queue实现生产者消费者模型"></a>基于Queue实现生产者消费者模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process,Queue</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        res=q.get()</span><br><span class="line">        <span class="keyword">if</span> res <span class="keyword">is</span> <span class="keyword">None</span>:<span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'\033[45m消费者拿到了：%s\033[0m'</span> %res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(seq,q)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> seq:</span><br><span class="line">        time.sleep(random.randint(<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">        print(<span class="string">'\033[46m生产者生产了：%s\033[0m'</span> %item)</span><br><span class="line">        q.put(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    q=Queue()</span><br><span class="line">    c=Process(target=consumer,args=(q,))</span><br><span class="line">    c.start()</span><br><span class="line">    producer((<span class="string">'包子%s'</span> %i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>)),q)</span><br><span class="line">    q.put(<span class="keyword">None</span>)</span><br><span class="line">    c.join()</span><br><span class="line">    print(<span class="string">'主线程'</span>)</span><br></pre></td></tr></table></figure><h3 id="Pool类"><a href="#Pool类" class="headerlink" title="Pool类"></a>Pool类</h3><p>通过维护一个进程池来控制进程数目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建进程池</span></span><br><span class="line">Pool([numprocess  [,initializer [, initargs]]])</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">numprocess: 要创建的进程数，如果省略，将默认使用cpu_count()的值</span></span><br><span class="line"><span class="string">initializer：是每个工作进程启动时要执行的可调用对象，默认为None</span></span><br><span class="line"><span class="string">initargs：是要传给initializer的参数组</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h4 id="方法简介"><a href="#方法简介" class="headerlink" title="方法简介"></a>方法简介</h4><table><thead><tr><th>func</th><th>description</th></tr></thead><tbody><tr><td>p.apply(func [, args [, kwargs]])</td><td>在一个池工作进程中执行func(*args,**kwargs),阻塞模式</td></tr><tr><td>p.apply_async(func [, args [, kwargs]])</td><td>在一个池工作进程中执行func(*args,**kwargs),然后返回结果。非阻塞,此方法的结果是AsyncResult类的实例，可调用callback函数。当func的结果变为可用时，将理解传递给callback。callback禁止执行任何阻塞操作，否则将接收其他异步操作中的结果。</td></tr><tr><td>p.close()</td><td>关闭进程池，防止进一步操作,如果所有操作持续挂起，它们将在工作进程终止前完成</td></tr><tr><td>P.jion()</td><td>等待所有工作进程退出。此方法只能在close（）或teminate()之后调用</td></tr></tbody></table><p><strong>方法apply_async()和map_async（）的返回值是AsyncResul的实例obj。实例具有以下方法:</strong></p><table><thead><tr><th>func</th><th>description</th></tr></thead><tbody><tr><td>obj.get()</td><td>返回结果，如果有必要则等待结果到达。timeout是可选的。如果在指定时间内还没有到达，将引发一场。如果远程操作中引发了异常，它将在调用此方法时再次被引发</td></tr><tr><td>obj.ready()</td><td>如果调用完成，返回True</td></tr><tr><td>obj.successful()</td><td>如果调用完成且没有引发异常，返回True，如果在结果就绪之前调用此方法，引发异常</td></tr><tr><td>obj.wait([timeout])</td><td>等待结果变为可用</td></tr><tr><td>obj.terminate()</td><td>立即终止所有工作进程，同时不执行任何清理或结束任何挂起工作。如果p被垃圾回收，将自动调用此函数</td></tr></tbody></table><h4 id="apply-async-非阻塞使用"><a href="#apply-async-非阻塞使用" class="headerlink" title="apply_async(非阻塞使用)"></a>apply_async(非阻塞使用)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time,random,os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(n)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> n**<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p=Pool()</span><br><span class="line"></span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        res=p.apply_async(work,args=(i,))</span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    p.close()</span><br><span class="line">    p.join() <span class="comment">#等待进程池中所有进程执行完毕</span></span><br><span class="line"></span><br><span class="line">    nums=[]</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_l:</span><br><span class="line">        nums.append(res.get()) <span class="comment">#拿到所有结果</span></span><br><span class="line">    print(nums) <span class="comment">#主进程拿到所有的处理结果,可以在主进程中进行统一进行处理</span></span><br></pre></td></tr></table></figure><h4 id="apply-async-回调函数-爬虫-实例"><a href="#apply-async-回调函数-爬虫-实例" class="headerlink" title="apply_async + 回调函数 + 爬虫 实例"></a>apply_async + 回调函数 + 爬虫 实例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(url,pattern)</span>:</span></span><br><span class="line">    response=requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> (response.text,pattern)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(info)</span>:</span></span><br><span class="line">    page_content,pattern=info</span><br><span class="line">    res=re.findall(pattern,page_content)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">        dic=&#123;</span><br><span class="line">            <span class="string">'index'</span>:item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'title'</span>:item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'actor'</span>:item[<span class="number">2</span>].strip()[<span class="number">3</span>:],</span><br><span class="line">            <span class="string">'time'</span>:item[<span class="number">3</span>][<span class="number">5</span>:],</span><br><span class="line">            <span class="string">'score'</span>:item[<span class="number">4</span>]+item[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        print(dic)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pattern1=re.compile(<span class="string">r'&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;.*?title="(.*?)".*?star.*?&gt;(.*?)&lt;.*?releasetime.*?&gt;(.*?)&lt;.*?integer.*?&gt;(.*?)&lt;.*?fraction.*?&gt;(.*?)&lt;'</span>,re.S)</span><br><span class="line"></span><br><span class="line">    url_dic=&#123;</span><br><span class="line">        <span class="string">'http://maoyan.com/board/7'</span>:pattern1,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p=Pool()</span><br><span class="line">    res_l=[]</span><br><span class="line">    <span class="keyword">for</span> url,pattern <span class="keyword">in</span> url_dic.items():</span><br><span class="line">        res=p.apply_async(get_page,args=(url,pattern),callback=parse_page)</span><br><span class="line">        res_l.append(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res_l:</span><br><span class="line">        i.get()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Multiprocessing&quot;&gt;&lt;a href=&quot;#Python-Multiprocessing&quot; class=&quot;headerlink&quot; title=&quot;Python Multiprocessing&quot;&gt;&lt;/a&gt;Python Multiprocessi
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
      <category term="Multiprocessing" scheme="http://www.superli.tech/tags/Multiprocessing/"/>
    
  </entry>
  
  <entry>
    <title>Vscode下书写Markdown的利器</title>
    <link href="http://www.superli.tech/Vscode%E4%B8%8B%E4%B9%A6%E5%86%99Markdown%E7%9A%84%E5%88%A9%E5%99%A8/"/>
    <id>http://www.superli.tech/Vscode下书写Markdown的利器/</id>
    <published>2018-08-22T11:22:12.000Z</published>
    <updated>2018-08-22T11:23:30.600Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-All-in-One"><a href="#Markdown-All-in-One" class="headerlink" title="Markdown All in One"></a>Markdown All in One</h1><blockquote><p>一款在VSCode下,编辑md文件十分好用的扩展插件,<a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one#overview" target="_blank" rel="noopener">搬运来源</a>,<a href="https://ci.appveyor.com/project/neilsustc/vscode-markdown/build/artifacts" target="_blank" rel="noopener">下载地址</a></p></blockquote><ul><li><a href="#markdown-all-in-one">Markdown All in One</a><ul><li><a href="#%E7%89%B9%E7%82%B9">特点</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE">常用快捷键</a><ul><li><a href="#%E4%B8%BE%E4%B8%AA%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%9A%84%E4%BD%BF%E7%94%A8%E6%A0%97%E5%AD%90">举个快捷键的使用栗子</a><ul><li><a href="#bold">bold</a></li><li><a href="#%E6%A0%87%E9%A2%98">标题</a></li><li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li><li><a href="#list-editing">List Editing</a></li><li><a href="#%E6%A0%BC%E5%BC%8F%E5%8C%96-table">格式化 Table</a></li><li><a href="#task-list">Task List</a></li><li><a href="#math-rendering">Math Rendering</a></li></ul></li></ul></li><li><a href="#%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4">一些有用的命令</a></li></ul></li></ul><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>提供了常用操作便利的快捷键</li><li>支持目录</li><li>一边书写一边预览(Ctrl + Shift + V or Ctrl + K V)</li><li>可轻松转换为HTML文件和PDF文件</li><li>优化了<strong>List editing</strong>的编辑</li><li>可格式化table (Alt + Shift + F) 以及Task list (use Alt + C to check/uncheck a list item)</li><li>支持特殊数学符号渲染</li></ul><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>Key</th><th>Command</th></tr></thead><tbody><tr><td>Ctrl + B</td><td>粗体</td></tr><tr><td>Ctrl + I</td><td>斜体</td></tr><tr><td>Alt + S</td><td>删除线</td></tr><tr><td>Ctrl + Shift + ]</td><td>标题(uplevel)</td></tr><tr><td>Ctrl + Shift + [</td><td>标题(downlevel)</td></tr><tr><td>Ctrl + M</td><td>Toggle math environment</td></tr><tr><td>Alt + C</td><td>Check/Uncheck task list item</td></tr></tbody></table><h3 id="举个快捷键的使用栗子"><a href="#举个快捷键的使用栗子" class="headerlink" title="举个快捷键的使用栗子"></a>举个快捷键的使用栗子</h3><h4 id="bold"><a href="#bold" class="headerlink" title="bold"></a>bold</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/gifs/bold-quick.gif" alt="图片"></p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/gifs/heading.gif" alt="图片"></p><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/gifs/toc.gif" alt="图片"></p><h4 id="List-Editing"><a href="#List-Editing" class="headerlink" title="List Editing"></a>List Editing</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/gifs/list-editing.gif" alt="图片"></p><h4 id="格式化-Table"><a href="#格式化-Table" class="headerlink" title="格式化 Table"></a>格式化 Table</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/gifs/table-formatter.gif" alt="图片"></p><h4 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/gifs/tasklists.gif" alt="图片"></p><h4 id="Math-Rendering"><a href="#Math-Rendering" class="headerlink" title="Math Rendering"></a>Math Rendering</h4><p><img src="https://github.com/neilsustc/vscode-markdown/raw/master/images/math.png" alt="图片"></p><h2 id="一些有用的命令"><a href="#一些有用的命令" class="headerlink" title="一些有用的命令"></a>一些有用的命令</h2><ul><li>Markdown: Create Table of Contents</li><li>Markdown: Update Table of Contents</li><li>Markdown: Toggle code span</li><li>Markdown: Print current document to HTML</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-All-in-One&quot;&gt;&lt;a href=&quot;#Markdown-All-in-One&quot; class=&quot;headerlink&quot; title=&quot;Markdown All in One&quot;&gt;&lt;/a&gt;Markdown All in One&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="Vscode" scheme="http://www.superli.tech/categories/Vscode/"/>
    
    
      <category term="Vscode" scheme="http://www.superli.tech/tags/Vscode/"/>
    
      <category term="Markdown" scheme="http://www.superli.tech/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>解决Pandas下,to_csv乱码</title>
    <link href="http://www.superli.tech/%E8%A7%A3%E5%86%B3Pandas%E4%B8%8B-to-csv%E4%B9%B1%E7%A0%81/"/>
    <id>http://www.superli.tech/解决Pandas下-to-csv乱码/</id>
    <published>2018-08-20T10:34:31.000Z</published>
    <updated>2018-10-19T01:11:13.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决Pandas下-to-csv用Excel打开后中文乱码问题"><a href="#解决Pandas下-to-csv用Excel打开后中文乱码问题" class="headerlink" title="解决Pandas下,to_csv用Excel打开后中文乱码问题"></a>解决Pandas下,to_csv用Excel打开后中文乱码问题</h1><p><strong>导致原因:</strong> 文件开头没有BOM</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(“df.csv”, encoding=’utf_8_sig’)</span><br></pre></td></tr></table></figure><p>转载自: <a href="https://blog.csdn.net/weixin_39461443/article/details/75303072" target="_blank" rel="noopener">Dyson_L的个人博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;解决Pandas下-to-csv用Excel打开后中文乱码问题&quot;&gt;&lt;a href=&quot;#解决Pandas下-to-csv用Excel打开后中文乱码问题&quot; class=&quot;headerlink&quot; title=&quot;解决Pandas下,to_csv用Excel打开后中文乱码问
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
      <category term="pandas" scheme="http://www.superli.tech/categories/Python/pandas/"/>
    
    
      <category term="Pandas" scheme="http://www.superli.tech/tags/Pandas/"/>
    
  </entry>
  
  <entry>
    <title>Python Shutil</title>
    <link href="http://www.superli.tech/Shutil/"/>
    <id>http://www.superli.tech/Shutil/</id>
    <published>2018-08-06T00:52:12.000Z</published>
    <updated>2018-10-19T01:05:25.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Shutil-Easystart"><a href="#Python-Shutil-Easystart" class="headerlink" title="Python Shutil Easystart"></a>Python Shutil Easystart</h1><p>os模块提供了对目录或者文件的新建/删除/查看文件属性，还提供了对文件以及目录的路径操作, 比如说：绝对路径，父目录…  但是，os并没有提供文件的移动、复制、打包、压缩、解压等操作, 而接下来所讲的shutil则就是对os中文件操作的补充</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="shutil-copyfileobj-fsrc-fdst-length"><a href="#shutil-copyfileobj-fsrc-fdst-length" class="headerlink" title="shutil.copyfileobj(fsrc, fdst[, length])"></a>shutil.copyfileobj(fsrc, fdst[, length])</h3><p>copy文件内容到另一个文件，可以copy指定大小的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyfileobj</span><span class="params">(fsrc, fdst, length=<span class="number">16</span>*<span class="number">1024</span>)</span>:</span></span><br><span class="line">    <span class="string">"""copy data from file-like object fsrc to file-like object fdst"""</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        buf = fsrc.read(length)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> buf:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        fdst.write(buf)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 在其中fsrc，fdst都是文件对象，都需要打开后才能进行复制操作</span></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">f1=open(<span class="string">'name'</span>,<span class="string">'r'</span>)</span><br><span class="line">f2=open(<span class="string">'name_copy'</span>,<span class="string">'w+'</span>)</span><br><span class="line">shutil.copyfileobj(f1,f2,length=<span class="number">16</span>*<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><h3 id="shutil-copyfile-src-dst"><a href="#shutil-copyfile-src-dst" class="headerlink" title="shutil.copyfile(src, dst)"></a>shutil.copyfile(src, dst)</h3><p>只复制文件内容,效果同上,不过这里只用给path而不需要给文件对象,从源src复制到dst中去,前提是目标地址是具备可写权限,否则将抛出异常信息IOException,值得注意的是当前的dst已存在的话就会被覆盖掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copyfile</span><span class="params">(src, dst, *, follow_symlinks=True)</span>:</span></span><br><span class="line">    <span class="string">"""Copy data from src to dst.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If follow_symlinks is not set and src is a symbolic link, a new</span></span><br><span class="line"><span class="string">    symlink will be created instead of copying the file it points to.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> _samefile(src, dst):</span><br><span class="line">        <span class="keyword">raise</span> SameFileError(<span class="string">"&#123;!r&#125; and &#123;!r&#125; are the same file"</span>.format(src, dst))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fn <span class="keyword">in</span> [src, dst]:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            st = os.stat(fn)</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="comment"># File most likely does not exist</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># XXX What about other special files? (sockets, devices...)</span></span><br><span class="line">            <span class="keyword">if</span> stat.S_ISFIFO(st.st_mode):</span><br><span class="line">                <span class="keyword">raise</span> SpecialFileError(<span class="string">"`%s` is a named pipe"</span> % fn)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> follow_symlinks <span class="keyword">and</span> os.path.islink(src):</span><br><span class="line">        os.symlink(os.readlink(src), dst)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> open(src, <span class="string">'rb'</span>) <span class="keyword">as</span> fsrc:</span><br><span class="line">            <span class="keyword">with</span> open(dst, <span class="string">'wb'</span>) <span class="keyword">as</span> fdst:</span><br><span class="line">                copyfileobj(fsrc, fdst)</span><br><span class="line">    <span class="keyword">return</span> dst</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">shutil.copyfile(<span class="string">'name'</span>, <span class="string">'name_copy_2'</span>)</span><br></pre></td></tr></table></figure><h3 id="shutil-copymode-src-dst"><a href="#shutil-copymode-src-dst" class="headerlink" title="shutil.copymode(src, dst)"></a>shutil.copymode(src, dst)</h3><p>仅copy权限，不更改文件内容，组和用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copymode</span><span class="params">(src, dst, *, follow_symlinks=True)</span>:</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> follow_symlinks <span class="keyword">and</span> os.path.islink(src) <span class="keyword">and</span> os.path.islink(dst):</span><br><span class="line">    <span class="keyword">if</span> hasattr(os, <span class="string">'lchmod'</span>):</span><br><span class="line">      stat_func, chmod_func = os.lstat, os.lchmod</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">elif</span> hasattr(os, <span class="string">'chmod'</span>):</span><br><span class="line">    stat_func, chmod_func = os.stat, os.chmod</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  st = stat_func(src)</span><br><span class="line">  chmod_func(dst, stat.S_IMODE(st.st_mode))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用(以Linux 平台为例子)</span></span><br><span class="line">&gt;&gt;&gt;ls -l</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">79</span> May <span class="number">14</span> <span class="number">05</span>:<span class="number">17</span> test1</span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">0</span> May <span class="number">14</span> <span class="number">19</span>:<span class="number">10</span> test2</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> shutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.copymode(<span class="string">'test1'</span>, <span class="string">'test2'</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;ls -l</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">79</span> May <span class="number">14</span> <span class="number">05</span>:<span class="number">17</span> test1</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root <span class="number">0</span> May <span class="number">14</span> <span class="number">19</span>:<span class="number">10</span> test2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当目标文件dst不存在时,将会报错</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>shutil.copymode(<span class="string">'test1'</span>, <span class="string">'test3'</span>)  </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"> File <span class="string">"/usr/local/python/lib/python3.6/shutil.py"</span>, line <span class="number">132</span>, <span class="keyword">in</span> copymode</span><br><span class="line">  chmod_func(dst, stat.S_IMODE(st.st_mode))</span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'test233'</span></span><br></pre></td></tr></table></figure><h3 id="shutil-copystat-src-dst"><a href="#shutil-copystat-src-dst" class="headerlink" title="shutil.copystat(src, dst)"></a>shutil.copystat(src, dst)</h3><p>复制所有的状态信息，包括权限，组，用户，时间等</p><h3 id="shutil-copy-src-dst"><a href="#shutil-copy-src-dst" class="headerlink" title="shutil.copy(src, dst)"></a>shutil.copy(src, dst)</h3><p>复制文件的内容以及权限，先copyfile后copymode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(src, dst, *, follow_symlinks=True)</span>:</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> os.path.isdir(dst):</span><br><span class="line">   dst = os.path.join(dst, os.path.basename(src))</span><br><span class="line"> copyfile(src, dst, follow_symlinks=follow_symlinks)</span><br><span class="line"> copymode(src, dst, follow_symlinks=follow_symlinks)</span><br><span class="line"> <span class="keyword">return</span> dst</span><br></pre></td></tr></table></figure><h3 id="shutil-copy2-src-dst"><a href="#shutil-copy2-src-dst" class="headerlink" title="shutil.copy2(src, dst)"></a>shutil.copy2(src, dst)</h3><p>复制文件的内容以及文件的所有状态信息。先copyfile后copystat</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">copy2</span><span class="params">(src, dst, *, follow_symlinks=True)</span>:</span></span><br><span class="line">  <span class="string">"""Copy data and all stat info ("cp -p src dst"). Return the file's</span></span><br><span class="line"><span class="string">  destination."</span></span><br><span class="line"><span class="string">  The destination may be a directory.</span></span><br><span class="line"><span class="string">  If follow_symlinks is false, symlinks won't be followed. This</span></span><br><span class="line"><span class="string">  resembles GNU's "cp -P src dst".</span></span><br><span class="line"><span class="string">  """</span></span><br><span class="line">  <span class="keyword">if</span> os.path.isdir(dst):</span><br><span class="line">    dst = os.path.join(dst, os.path.basename(src))</span><br><span class="line">  copyfile(src, dst, follow_symlinks=follow_symlinks)</span><br><span class="line">  copystat(src, dst, follow_symlinks=follow_symlinks)</span><br><span class="line">  <span class="keyword">return</span> dst</span><br></pre></td></tr></table></figure><h3 id="shutil-copytree-src-dst-symlinks-False-ignore-None-copy-function-copy2-ignore-dangling-symlinks-False"><a href="#shutil-copytree-src-dst-symlinks-False-ignore-None-copy-function-copy2-ignore-dangling-symlinks-False" class="headerlink" title="shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False)"></a>shutil.copytree(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False)</h3><p>递归的复制文件内容及状态信息</p><h3 id="shutil-rmtree-path-ignore-errors-False-onerror-None"><a href="#shutil-rmtree-path-ignore-errors-False-onerror-None" class="headerlink" title="shutil.rmtree(path, ignore_errors=False, onerror=None)"></a>shutil.rmtree(path, ignore_errors=False, onerror=None)</h3><p>递归地删除文件</p><h3 id="shutil-move-src-dst"><a href="#shutil-move-src-dst" class="headerlink" title="shutil.move(src, dst)"></a>shutil.move(src, dst)</h3><p>递归的移动文件</p><h3 id="shutil-make-archive-base-name-format-root-dir-None-base-dir-None-verbose-0-dry-run-0-owner-None-group-None-logger-None"><a href="#shutil-make-archive-base-name-format-root-dir-None-base-dir-None-verbose-0-dry-run-0-owner-None-group-None-logger-None" class="headerlink" title="shutil.make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None)"></a>shutil.make_archive(base_name, format, root_dir=None, base_dir=None, verbose=0, dry_run=0, owner=None, group=None, logger=None)</h3><p>压缩打包</p><ul><li>base_name：压缩打包后的文件名或者路径名</li><li>format：   压缩或者打包格式, “zip”, “tar”, “bztar”or “gztar”</li><li>root_dir:  将哪个目录或者文件打包（也就是源文件）</li></ul><h3 id="shutil-unpack-archive-filename-extract-dir-format"><a href="#shutil-unpack-archive-filename-extract-dir-format" class="headerlink" title="shutil.unpack_archive(filename[, extract_dir[, format]])"></a>shutil.unpack_archive(filename[, extract_dir[, format]])</h3><p>解压</p><ul><li>filename: 待解压文件的完整路径</li><li>extract_dir: 解压路径, 默认为当前目录</li><li>format: 解压格式, one of “zip”, “tar”, “gztar”, “bztar”, or “xztar”</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Shutil-Easystart&quot;&gt;&lt;a href=&quot;#Python-Shutil-Easystart&quot; class=&quot;headerlink&quot; title=&quot;Python Shutil Easystart&quot;&gt;&lt;/a&gt;Python Shutil Eas
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python itertools</title>
    <link href="http://www.superli.tech/Itertools/"/>
    <id>http://www.superli.tech/Itertools/</id>
    <published>2018-08-06T00:52:01.000Z</published>
    <updated>2018-10-19T01:02:08.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Itertools"><a href="#Python-Itertools" class="headerlink" title="Python Itertools"></a>Python Itertools</h1><p>高效循环创建迭代器的函数集合</p><p>文章大部分内容转载自<a href="http://www.wklken.me/posts/2013/08/20/python-extra-itertools.html" target="_blank" rel="noopener">wklken</a>前辈的博客, 本来想自己翻译和补充<a href="https://docs.python.org/3/library/itertools.html" target="_blank" rel="noopener">官方文档</a>的内容, 然后发现wklken前辈已经做了这件事情,只是用的Python2,所以在这里我用Python3修改整理和补充了一些内容,节省了不少时间</p><p><strong>特别说明:</strong></p><p>python2 to 3 关于itertools MODULE的一些改变</p><p><img src="2to3.png" alt="2to3"></p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>由三部分组成:</p><ul><li>无限迭代器</li><li>处理输入系列迭代器</li><li>组成生成器</li></ul><p><strong>无限迭代器:</strong></p><p><img src="无限迭代器.png" alt="无限迭代器"></p><p><strong>处理输入序列迭代器:</strong></p><p><img src="处理输入序列迭代器.png" alt="处理输入序列迭代器"></p><p><strong>组合迭代器:</strong></p><p><img src="组合迭代器.png" alt="组合迭代器"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>在没有学习迭代器之前,如果你想计算四匹马赛跑到达终点排名的所有可能性,代码该如何去写?</p><h2 id="无限迭代器"><a href="#无限迭代器" class="headerlink" title="无限迭代器"></a>无限迭代器</h2><h3 id="itertools-count-start-0-step-1"><a href="#itertools-count-start-0-step-1" class="headerlink" title="itertools.count(start=0, step=1)"></a>itertools.count(start=0, step=1)</h3><p>创建一个迭代器，生成从start开始的连续整数，如果忽略n，则从0开始计算(注意：此迭代器不支持长整数)</p><p>如果超出了sys.maxint，计数器将溢出并继续从-sys.maxint-1开始计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(start=<span class="number">0</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">    <span class="comment"># count(10) --&gt; 10 11 12 13 14 ...</span></span><br><span class="line">    <span class="comment"># count(2.5, 0.5) -&gt; 2.5 3.0 3.5 ...</span></span><br><span class="line">    n = start</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += step</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">start + step * i <span class="keyword">for</span> i <span class="keyword">in</span> count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> zip(count(<span class="number">1</span>), [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h3 id="itertools-cycle-iterable"><a href="#itertools-cycle-iterable" class="headerlink" title="itertools.cycle(iterable)"></a>itertools.cycle(iterable)</h3><p>创建一个迭代器，对iterable中的元素反复执行循环操作，内部会生成iterable中的元素的一个副本，此副本用于返回循环中的重复项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cycle</span><span class="params">(iterable)</span>:</span></span><br><span class="line">    <span class="comment"># cycle('ABCD') --&gt; A B C D A B C D A B C D ...</span></span><br><span class="line">    saved = []</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> element</span><br><span class="line">        saved.append(element)</span><br><span class="line">    <span class="keyword">while</span> saved:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> saved:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cycle([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i, item)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">'c'</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h3 id="itertools-repeat-object-times"><a href="#itertools-repeat-object-times" class="headerlink" title="itertools.repeat(object[, times])"></a>itertools.repeat(object[, times])</h3><p>创建一个迭代器，重复生成object，times（如果已提供）指定重复计数，如果未提供times，将无止尽返回该对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repeat</span><span class="params">(object, times=None)</span>:</span></span><br><span class="line">    <span class="comment"># repeat(10, 3) --&gt; 10 10 10</span></span><br><span class="line">    <span class="keyword">if</span> times <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">yield</span> object</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(times):</span><br><span class="line">            <span class="keyword">yield</span> object</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> repeat(<span class="string">'over-and-over'</span>, <span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">over-<span class="keyword">and</span>-over</span><br><span class="line">over-<span class="keyword">and</span>-over</span><br><span class="line">over-<span class="keyword">and</span>-over</span><br><span class="line">over-<span class="keyword">and</span>-over</span><br><span class="line">over-<span class="keyword">and</span>-over</span><br></pre></td></tr></table></figure><h2 id="处理输入序列迭代器"><a href="#处理输入序列迭代器" class="headerlink" title="处理输入序列迭代器"></a>处理输入序列迭代器</h2><h3 id="itertools-chain-iterables"><a href="#itertools-chain-iterables" class="headerlink" title="itertools.chain(*iterables)"></a>itertools.chain(*iterables)</h3><p>将多个迭代器作为参数, 但只返回单个迭代器, 它产生所有参数迭代器的内容, 就好像他们是来自于一个单一的序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chain</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="comment"># chain('ABC', 'DEF') --&gt; A B C D E F</span></span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> iterables:</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> it:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> chain([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><h3 id="itertools-compress-data-selectors"><a href="#itertools-compress-data-selectors" class="headerlink" title="itertools.compress(data, selectors)"></a>itertools.compress(data, selectors)</h3><p>提供一个选择列表，对原始数据进行筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data, selectors)</span>:</span></span><br><span class="line">    <span class="comment"># compress('ABCDEF', [1,0,1,0,1,1]) --&gt; A C E F</span></span><br><span class="line">    <span class="keyword">return</span> (d <span class="keyword">for</span> d, s <span class="keyword">in</span> izip(data, selectors) <span class="keyword">if</span> s)</span><br></pre></td></tr></table></figure><h3 id="itertools-dropwhile-predicate-iterable"><a href="#itertools-dropwhile-predicate-iterable" class="headerlink" title="itertools.dropwhile(predicate, iterable)"></a>itertools.dropwhile(predicate, iterable)</h3><p>创建一个迭代器，只要函数predicate(item)为True，就丢弃iterable中的项，如果predicate返回False，就会生成iterable中的项和所有后续项</p><p>即：在条件为false之后的第一次, 返回迭代器中剩下来的项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dropwhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># dropwhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 6 4 1</span></span><br><span class="line">    iterable = iter(iterable)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_drop</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Testing:'</span>, x)</span><br><span class="line">    <span class="keyword">return</span>(x&lt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dropwhile(should_drop, [ <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">-2</span> ]):</span><br><span class="line">    print(<span class="string">'Yielding:'</span>, i)</span><br><span class="line"></span><br><span class="line">Testing: <span class="number">-1</span></span><br><span class="line">Testing: <span class="number">0</span></span><br><span class="line">Testing: <span class="number">1</span></span><br><span class="line">Yielding: <span class="number">1</span></span><br><span class="line">Yielding: <span class="number">2</span></span><br><span class="line">Yielding: <span class="number">3</span></span><br><span class="line">Yielding: <span class="number">4</span></span><br><span class="line">Yielding: <span class="number">1</span></span><br><span class="line">Yielding: <span class="number">-2</span></span><br></pre></td></tr></table></figure><h3 id="itertools-groupby-iterable-key"><a href="#itertools-groupby-iterable-key" class="headerlink" title="itertools.groupby(iterable[, key])"></a>itertools.groupby(iterable[, key])</h3><p>返回一个产生按照key进行分组后的值集合的迭代器.</p><p>如果iterable在多次连续迭代中生成了同一项，则会定义一个组，如果将此函数应用一个分类列表，那么分组将定义该列表中的所有唯一项，key（如果已提供）是一个函数，应用于每一项，如果此函数存在返回值，该值将用于后续项而不是该项本身进行比较，此函数返回的迭代器生成元素(key, group)，其中key是分组的键值，group是迭代器，生成组成该组的所有项。</p><p>即：按照keyfunc函数对序列每个元素执行后的结果分组(每个分组是一个迭代器), 返回这些分组的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">groupby</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B</span></span><br><span class="line">    <span class="comment"># [list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterable, key=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            key = <span class="keyword">lambda</span> x: x</span><br><span class="line">        self.keyfunc = key</span><br><span class="line">        self.it = iter(iterable)</span><br><span class="line">        self.tgtkey = self.currkey = self.currvalue = object()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.currkey == self.tgtkey:</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line">        self.tgtkey = self.currkey</span><br><span class="line">        <span class="keyword">return</span> (self.currkey, self._grouper(self.tgtkey))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_grouper</span><span class="params">(self, tgtkey)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self.currkey == tgtkey:</span><br><span class="line">            <span class="keyword">yield</span> self.currvalue</span><br><span class="line">            self.currvalue = next(self.it)    <span class="comment"># Exit on StopIteration</span></span><br><span class="line">            self.currkey = self.keyfunc(self.currvalue)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line">qs = [&#123;<span class="string">'date'</span> : <span class="number">1</span>&#125;,&#123;<span class="string">'date'</span> : <span class="number">2</span>&#125;]</span><br><span class="line">[(name, list(group)) <span class="keyword">for</span> name, group <span class="keyword">in</span> itertools.groupby(qs, <span class="keyword">lambda</span> p:p[<span class="string">'date'</span>])]</span><br><span class="line"></span><br><span class="line">Out[<span class="number">77</span>]: [(<span class="number">1</span>, [&#123;<span class="string">'date'</span>: <span class="number">1</span>&#125;]), (<span class="number">2</span>, [&#123;<span class="string">'date'</span>: <span class="number">2</span>&#125;])]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"> a = [<span class="string">'aa'</span>, <span class="string">'ab'</span>, <span class="string">'abc'</span>, <span class="string">'bcd'</span>, <span class="string">'abcde'</span>]</span><br><span class="line"> <span class="keyword">for</span> i, k <span class="keyword">in</span> groupby(a, len):</span><br><span class="line"><span class="meta">... </span>    print(i, list(k))</span><br><span class="line">...</span><br><span class="line"><span class="number">2</span> [<span class="string">'aa'</span>, <span class="string">'ab'</span>]</span><br><span class="line"><span class="number">3</span> [<span class="string">'abc'</span>, <span class="string">'bcd'</span>]</span><br><span class="line"><span class="number">5</span> [<span class="string">'abcde'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个栗子</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line">d = dict(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">1</span>, d=<span class="number">2</span>, e=<span class="number">1</span>, f=<span class="number">2</span>, g=<span class="number">3</span>)</span><br><span class="line">di = sorted(d.iteritems(), key=itemgetter(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> k, g <span class="keyword">in</span> groupby(di, key=itemgetter(<span class="number">1</span>)):</span><br><span class="line">    print(k, map(itemgetter(<span class="number">0</span>), g))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>]</span><br><span class="line"><span class="number">2</span> [<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="number">3</span> [<span class="string">'g'</span>]</span><br></pre></td></tr></table></figure><h3 id="itertools-ifilter-predicate-iterable"><a href="#itertools-ifilter-predicate-iterable" class="headerlink" title="itertools.ifilter(predicate, iterable)"></a>itertools.ifilter(predicate, iterable)</h3><p>返回的是迭代器类似于针对列表的内置函数 filter() , 它只包括当测试函数返回true时的项. 它不同于 dropwhile()</p><p>创建一个迭代器，仅生成iterable中predicate(item)为True的项，如果predicate为None，将返回iterable中所有计算为True的项</p><p>对函数func执行返回真的元素的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ifilter</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># ifilter(lambda x: x%2, range(10)) --&gt; 1 3 5 7 9</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        predicate = bool</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_item</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Testing:'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> (x&lt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ifilter(check_item, [ <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">-2</span> ]):</span><br><span class="line">    print(<span class="string">'Yielding:'</span>, i)</span><br><span class="line"></span><br><span class="line">Testing: <span class="number">-1</span></span><br><span class="line">Yielding: <span class="number">-1</span></span><br><span class="line">Testing: <span class="number">0</span></span><br><span class="line">Yielding: <span class="number">0</span></span><br><span class="line">Testing: <span class="number">1</span></span><br><span class="line">Testing: <span class="number">2</span></span><br><span class="line">Testing: <span class="number">3</span></span><br><span class="line">Testing: <span class="number">4</span></span><br><span class="line">Testing: <span class="number">1</span></span><br><span class="line">Testing: <span class="number">-2</span></span><br><span class="line">Yielding: <span class="number">-2</span></span><br></pre></td></tr></table></figure><h3 id="itertools-ifilterfalse-predicate-iterable"><a href="#itertools-ifilterfalse-predicate-iterable" class="headerlink" title="itertools.ifilterfalse(predicate, iterable)"></a>itertools.ifilterfalse(predicate, iterable)</h3><p>和ifilter(函数相反 ， 返回一个包含那些测试函数返回false的项的迭代器)</p><p>创建一个迭代器，仅生成iterable中predicate(item)为False的项，如果predicate为None，则返回iterable中所有计算为False的项 对函数func执行返回假的元素的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ifilterfalse</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># ifilterfalse(lambda x: x%2, range(10)) --&gt; 0 2 4 6 8</span></span><br><span class="line">    <span class="keyword">if</span> predicate <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        predicate = bool</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_item</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Testing:'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> (x&lt;<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ifilterfalse(check_item, [ <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">-2</span> ]):</span><br><span class="line">    print(<span class="string">'Yielding:'</span>, i)</span><br><span class="line"></span><br><span class="line">Testing: <span class="number">-1</span></span><br><span class="line">Testing: <span class="number">0</span></span><br><span class="line">Testing: <span class="number">1</span></span><br><span class="line">Yielding: <span class="number">1</span></span><br><span class="line">Testing: <span class="number">2</span></span><br><span class="line">Yielding: <span class="number">2</span></span><br><span class="line">Testing: <span class="number">3</span></span><br><span class="line">Yielding: <span class="number">3</span></span><br><span class="line">Testing: <span class="number">4</span></span><br><span class="line">Yielding: <span class="number">4</span></span><br><span class="line">Testing: <span class="number">1</span></span><br><span class="line">Yielding: <span class="number">1</span></span><br><span class="line">Testing: <span class="number">-2</span></span><br></pre></td></tr></table></figure><h3 id="itertools-islice-iterable-stop"><a href="#itertools-islice-iterable-stop" class="headerlink" title="itertools.islice(iterable, stop)"></a>itertools.islice(iterable, stop)</h3><p>itertools.islice(iterable, start, stop[, step])</p><p>返回的迭代器是返回了输入迭代器根据索引来选取的项</p><p>创建一个迭代器，生成项的方式类似于切片返回值： iterable[start : stop : step]，将跳过前start个项，迭代在stop所指定的位置停止，step指定用于跳过项的步幅。 与切片不同，负值不会用于任何start，stop和step， 如果省略了start，迭代将从0开始，如果省略了step，步幅将采用1.</p><p>返回序列seq的从start开始到stop结束的步长为step的元素的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">islice</span><span class="params">(iterable, *args)</span>:</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2) --&gt; A B</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, 4) --&gt; C D</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 2, None) --&gt; C D E F G</span></span><br><span class="line">    <span class="comment"># islice('ABCDEFG', 0, None, 2) --&gt; A C E G</span></span><br><span class="line">    s = slice(*args)</span><br><span class="line">    it = iter(xrange(s.start <span class="keyword">or</span> <span class="number">0</span>, s.stop <span class="keyword">or</span> sys.maxint, s.step <span class="keyword">or</span> <span class="number">1</span>))</span><br><span class="line">    nexti = next(it)</span><br><span class="line">    <span class="keyword">for</span> i, element <span class="keyword">in</span> enumerate(iterable):</span><br><span class="line">        <span class="keyword">if</span> i == nexti:</span><br><span class="line">            <span class="keyword">yield</span> element</span><br><span class="line">            nexti = next(it)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Stop at 5:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(count(), <span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Start at 5, Stop at 10:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(count(), <span class="number">5</span>, <span class="number">10</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'By tens to 100:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(count(), <span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">Stop at <span class="number">5</span>:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">Start at <span class="number">5</span>, Stop at <span class="number">10</span>:</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">By tens to <span class="number">100</span>:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">60</span></span><br><span class="line"><span class="number">70</span></span><br><span class="line"><span class="number">80</span></span><br><span class="line"><span class="number">90</span></span><br></pre></td></tr></table></figure><h3 id="itertools-imap-function-iterables"><a href="#itertools-imap-function-iterables" class="headerlink" title="itertools.imap(function, *iterables)"></a>itertools.imap(function, *iterables)</h3><p>创建一个迭代器，生成项function(i1, i2, …, iN)，其中i1，i2…iN分别来自迭代器iter1，iter2 … iterN，如果function为None，则返回(i1, i2, …, iN)形式的元组，只要提供的一个迭代器不再生成值，迭代就会停止。</p><p>即：返回一个迭代器, 它是调用了一个其值在输入迭代器上的函数, 返回结果. 它类似于内置函数 map() , 只是前者在任意输入迭代器结束后就停止(而不是插入None值来补全所有的输入).</p><p>返回序列每个元素被func执行后返回值的序列的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imap</span><span class="params">(function, *iterables)</span>:</span></span><br><span class="line">    <span class="comment"># imap(pow, (2,3,10), (5,2,3)) --&gt; 32 9 1000</span></span><br><span class="line">    iterables = map(iter, iterables)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        args = [next(it) <span class="keyword">for</span> it <span class="keyword">in</span> iterables]</span><br><span class="line">        <span class="keyword">if</span> function <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> tuple(args)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> function(*args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Doubles:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> imap(<span class="keyword">lambda</span> x:<span class="number">2</span>*x, range(<span class="number">5</span>)):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Multiples:'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> imap(<span class="keyword">lambda</span> x,y:(x, y, x*y), range(<span class="number">5</span>), range(<span class="number">5</span>,<span class="number">10</span>)):</span><br><span class="line">    print(<span class="string">'%d * %d = %d'</span> % i)</span><br><span class="line"></span><br><span class="line">Doubles:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line">Multiples:</span><br><span class="line"><span class="number">0</span> * <span class="number">5</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> * <span class="number">6</span> = <span class="number">6</span></span><br><span class="line"><span class="number">2</span> * <span class="number">7</span> = <span class="number">14</span></span><br><span class="line"><span class="number">3</span> * <span class="number">8</span> = <span class="number">24</span></span><br><span class="line"><span class="number">4</span> * <span class="number">9</span> = <span class="number">36</span></span><br></pre></td></tr></table></figure><h3 id="itertools-starmap-function-iterable"><a href="#itertools-starmap-function-iterable" class="headerlink" title="itertools.starmap(function, iterable)"></a>itertools.starmap(function, iterable)</h3><p>创建一个迭代器，生成值func(*item),其中item来自iterable，只有当iterable生成的项适用于这种调用函数的方式时，此函数才有效。</p><p>对序列seq的每个元素作为func的参数列表执行, 返回执行结果的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">starmap</span><span class="params">(function, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># starmap(pow, [(2,5), (3,2), (10,3)]) --&gt; 32 9 1000</span></span><br><span class="line">    <span class="keyword">for</span> args <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> function(*args)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">values = [(<span class="number">0</span>, <span class="number">5</span>), (<span class="number">1</span>, <span class="number">6</span>), (<span class="number">2</span>, <span class="number">7</span>), (<span class="number">3</span>, <span class="number">8</span>), (<span class="number">4</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> starmap(<span class="keyword">lambda</span> x,y:(x, y, x*y), values):</span><br><span class="line">    print(<span class="string">'%d * %d = %d'</span> % i)</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> * <span class="number">5</span> = <span class="number">0</span></span><br><span class="line"><span class="number">1</span> * <span class="number">6</span> = <span class="number">6</span></span><br><span class="line"><span class="number">2</span> * <span class="number">7</span> = <span class="number">14</span></span><br><span class="line"><span class="number">3</span> * <span class="number">8</span> = <span class="number">24</span></span><br><span class="line"><span class="number">4</span> * <span class="number">9</span> = <span class="number">36</span></span><br></pre></td></tr></table></figure><h3 id="itertools-tee-iterable-n-2"><a href="#itertools-tee-iterable-n-2" class="headerlink" title="itertools.tee(iterable[, n=2])"></a>itertools.tee(iterable[, n=2])</h3><p>返回一些基于单个原始输入的独立迭代器(默认为2). 它和Unix上的tee工具有点语义相似, 也就是说它们都重复读取输入设备中的值并将值写入到一个命名文件和标准输出中</p><p>从iterable创建n个独立的迭代器，创建的迭代器以n元组的形式返回，n的默认值为2，此函数适用于任何可迭代的对象，但是，为了克隆原始迭代器，生成的项会被缓存，并在所有新创建的迭代器中使用，一定要注意，不要在调用tee()之后使用原始迭代器iterable，否则缓存机制可能无法正确工作。</p><p>把一个迭代器分为n个迭代器, 返回一个元组.默认是两个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tee</span><span class="params">(iterable, n=<span class="number">2</span>)</span>:</span></span><br><span class="line">    it = iter(iterable)</span><br><span class="line">    deques = [collections.deque() <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen</span><span class="params">(mydeque)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> mydeque:             <span class="comment"># when the local deque is empty</span></span><br><span class="line">                newval = next(it)       <span class="comment"># fetch a new value and</span></span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> deques:        <span class="comment"># load it to all the deques</span></span><br><span class="line">                    d.append(newval)</span><br><span class="line">            <span class="keyword">yield</span> mydeque.popleft()</span><br><span class="line">    <span class="keyword">return</span> tuple(gen(d) <span class="keyword">for</span> d <span class="keyword">in</span> deques)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = islice(count(), <span class="number">5</span>)</span><br><span class="line">i1, i2 = tee(r)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> i1:</span><br><span class="line">    print(<span class="string">'i1:'</span>, i)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> i2:</span><br><span class="line">    print(<span class="string">'i2:'</span>, i)</span><br><span class="line"></span><br><span class="line">i1: <span class="number">0</span></span><br><span class="line">i1: <span class="number">1</span></span><br><span class="line">i1: <span class="number">2</span></span><br><span class="line">i1: <span class="number">3</span></span><br><span class="line">i1: <span class="number">4</span></span><br><span class="line">i2: <span class="number">0</span></span><br><span class="line">i2: <span class="number">1</span></span><br><span class="line">i2: <span class="number">2</span></span><br><span class="line">i2: <span class="number">3</span></span><br><span class="line">i2: <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="itertools-takewhile-predicate-iterable"><a href="#itertools-takewhile-predicate-iterable" class="headerlink" title="itertools.takewhile(predicate, iterable)"></a>itertools.takewhile(predicate, iterable)</h3><p>和dropwhile相反</p><p>创建一个迭代器，生成iterable中predicate(item)为True的项，只要predicate计算为False，迭代就会立即停止。</p><p>即：从序列的头开始, 直到执行函数func失败</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takewhile</span><span class="params">(predicate, iterable)</span>:</span></span><br><span class="line">    <span class="comment"># takewhile(lambda x: x&lt;5, [1,4,6,4,1]) --&gt; 1 4</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> predicate(x):</span><br><span class="line">            <span class="keyword">yield</span> x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">should_take</span><span class="params">(x)</span>:</span></span><br><span class="line">    print(<span class="string">'Testing:'</span>, x)</span><br><span class="line">    <span class="keyword">return</span> (x&lt;<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> takewhile(should_take, [ <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">-2</span> ]):</span><br><span class="line">    print(<span class="string">'Yielding:'</span>, i)</span><br><span class="line"></span><br><span class="line">Testing: <span class="number">-1</span></span><br><span class="line">Yielding: <span class="number">-1</span></span><br><span class="line">Testing: <span class="number">0</span></span><br><span class="line">Yielding: <span class="number">0</span></span><br><span class="line">Testing: <span class="number">1</span></span><br><span class="line">Yielding: <span class="number">1</span></span><br><span class="line">Testing: <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="itertools-izip-iterables"><a href="#itertools-izip-iterables" class="headerlink" title="itertools.izip(*iterables)"></a>itertools.izip(*iterables)</h3><p>返回一个合并了多个迭代器为一个元组的迭代器. 它类似于内置函数zip(), 只是它返回的是一个迭代器而不是一个列表</p><p>创建一个迭代器，生成元组(i1, i2, … iN)，其中i1，i2 … iN 分别来自迭代器iter1，iter2 … iterN，只要提供的某个迭代器不再生成值，迭代就会停止，此函数生成的值与内置的zip()函数相同</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line">izip(iter1, iter2, ... iterN):</span><br><span class="line">返回:(it1[<span class="number">0</span>],it2 [<span class="number">0</span>], it3[<span class="number">0</span>], ..), (it1[<span class="number">1</span>], it2[<span class="number">1</span>], it3[<span class="number">1</span>], ..)...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">izip</span><span class="params">(*iterables)</span>:</span></span><br><span class="line">    <span class="comment"># izip('ABCD', 'xy') --&gt; Ax By</span></span><br><span class="line">    iterators = map(iter, iterables)</span><br><span class="line">    <span class="keyword">while</span> iterators:</span><br><span class="line">        <span class="keyword">yield</span> tuple(map(next, iterators))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> izip([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]):</span><br><span class="line">    print(i)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'a'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'b'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h3 id="itertools-izip-longest-iterables-fillvalue"><a href="#itertools-izip-longest-iterables-fillvalue" class="headerlink" title="itertools.izip_longest(*iterables[, fillvalue])"></a>itertools.izip_longest(*iterables[, fillvalue])</h3><p>与izip()相同，但是迭代过程会持续到所有输入迭代变量iter1,iter2等都耗尽为止，如果没有使用fillvalue关键字参数指定不同的值，则使用None来填充已经使用的迭代变量的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZipExhausted</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">izip_longest</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">    <span class="comment"># izip_longest('ABCD', 'xy', fillvalue='-') --&gt; Ax By C- D-</span></span><br><span class="line">    fillvalue = kwds.get(<span class="string">'fillvalue'</span>)</span><br><span class="line">    counter = [len(args) - <span class="number">1</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sentinel</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> counter[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">raise</span> ZipExhausted</span><br><span class="line">        counter[<span class="number">0</span>] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> fillvalue</span><br><span class="line">    fillers = repeat(fillvalue)</span><br><span class="line">    iterators = [chain(it, sentinel(), fillers) <span class="keyword">for</span> it <span class="keyword">in</span> args]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> iterators:</span><br><span class="line">            <span class="keyword">yield</span> tuple(map(next, iterators))</span><br><span class="line">    <span class="keyword">except</span> ZipExhausted:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="组成生成器"><a href="#组成生成器" class="headerlink" title="组成生成器"></a>组成生成器</h2><h2 id="itertools-product-iterables-repeat"><a href="#itertools-product-iterables-repeat" class="headerlink" title="itertools.product(*iterables[, repeat])"></a>itertools.product(*iterables[, repeat])</h2><p>笛卡尔积</p><p>创建一个迭代器，生成表示item1，item2等中的项目的笛卡尔积的元组，repeat是一个关键字参数，指定重复生成序列的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">    <span class="comment"># product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy</span></span><br><span class="line">    <span class="comment"># product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111</span></span><br><span class="line">    pools = map(tuple, args) * kwds.get(<span class="string">'repeat'</span>, <span class="number">1</span>)</span><br><span class="line">    result = [[]]</span><br><span class="line">    <span class="keyword">for</span> pool <span class="keyword">in</span> pools:</span><br><span class="line">        result = [x+[y] <span class="keyword">for</span> x <span class="keyword">in</span> result <span class="keyword">for</span> y <span class="keyword">in</span> pool]</span><br><span class="line">    <span class="keyword">for</span> prod <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">yield</span> tuple(prod)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">b = (<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>)</span><br><span class="line">c = itertools.product(a,b)</span><br><span class="line"><span class="keyword">for</span> elem <span class="keyword">in</span> c:</span><br><span class="line">    print(elem)</span><br><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="string">'A'</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'B'</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'C'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'A'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'B'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'C'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'A'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'B'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><h3 id="itertools-permutations-iterable-r"><a href="#itertools-permutations-iterable-r" class="headerlink" title="itertools.permutations(iterable[, r])"></a>itertools.permutations(iterable[, r])</h3><p>排列</p><p>创建一个迭代器，返回iterable中所有长度为r的项目序列，如果省略了r，那么序列的长度与iterable中的项目数量相同： 返回p中任意取r个元素做排列的元组的迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    <span class="comment"># permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC</span></span><br><span class="line">    <span class="comment"># permutations(range(3)) --&gt; 012 021 102 120 201 210</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = range(n)</span><br><span class="line">    cycles = range(n, n-r, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            cycles[i] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cycles[i] == <span class="number">0</span>:</span><br><span class="line">                indices[i:] = indices[i+<span class="number">1</span>:] + indices[i:i+<span class="number">1</span>]</span><br><span class="line">                cycles[i] = n - i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j = cycles[i]</span><br><span class="line">                indices[i], indices[-j] = indices[-j], indices[i]</span><br><span class="line">                <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices[:r])</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">也可以用product实现</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutations</span><span class="params">(iterable, r=None)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    r = n <span class="keyword">if</span> r <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> r</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> product(range(n), repeat=r):</span><br><span class="line">        <span class="keyword">if</span> len(set(indices)) == r:</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><h3 id="itertools-combinations-iterable-r"><a href="#itertools-combinations-iterable-r" class="headerlink" title="itertools.combinations(iterable, r)"></a>itertools.combinations(iterable, r)</h3><p>创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (不带重复)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations('ABCD', 2) --&gt; AB AC AD BC BD CD</span></span><br><span class="line">    <span class="comment"># combinations(range(4), 3) --&gt; 012 013 023 123</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> r &gt; n:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = range(r)</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != i + n - r:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, r):</span><br><span class="line">            indices[j] = indices[j<span class="number">-1</span>] + <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> permutations(range(n), r):</span><br><span class="line">        <span class="keyword">if</span> sorted(indices) == list(indices):</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><h3 id="itertools-combinations-with-replacement-iterable-r"><a href="#itertools-combinations-with-replacement-iterable-r" class="headerlink" title="itertools.combinations_with_replacement(iterable, r)"></a>itertools.combinations_with_replacement(iterable, r)</h3><p>创建一个迭代器，返回iterable中所有长度为r的子序列，返回的子序列中的项按输入iterable中的顺序排序 (带重复)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations_with_replacement</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    <span class="comment"># combinations_with_replacement('ABC', 2) --&gt; AA AB AC BB BC CC</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> n <span class="keyword">and</span> r:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    indices = [<span class="number">0</span>] * r</span><br><span class="line">    <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(r)):</span><br><span class="line">            <span class="keyword">if</span> indices[i] != n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        indices[i:] = [indices[i] + <span class="number">1</span>] * (r - i)</span><br><span class="line">        <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">combinations_with_replacement</span><span class="params">(iterable, r)</span>:</span></span><br><span class="line">    pool = tuple(iterable)</span><br><span class="line">    n = len(pool)</span><br><span class="line">    <span class="keyword">for</span> indices <span class="keyword">in</span> product(range(n), repeat=r):</span><br><span class="line">        <span class="keyword">if</span> sorted(indices) == list(indices):</span><br><span class="line">            <span class="keyword">yield</span> tuple(pool[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices)</span><br></pre></td></tr></table></figure><h2 id="解疑"><a href="#解疑" class="headerlink" title="解疑"></a>解疑</h2><p>四匹马赛跑到达终点排名的所有可能性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用列表的值和索引分别表示4匹赛马和它们的排名</span></span><br><span class="line">horses = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">races = itertools.permutations(horses)</span><br><span class="line">print(list(races))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Itertools&quot;&gt;&lt;a href=&quot;#Python-Itertools&quot; class=&quot;headerlink&quot; title=&quot;Python Itertools&quot;&gt;&lt;/a&gt;Python Itertools&lt;/h1&gt;&lt;p&gt;高效循环创建迭代器的函数集合
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Collections</title>
    <link href="http://www.superli.tech/Collections/"/>
    <id>http://www.superli.tech/Collections/</id>
    <published>2018-08-03T01:58:48.000Z</published>
    <updated>2018-10-19T00:58:31.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Collections"><a href="#Python-Collections" class="headerlink" title="Python Collections"></a>Python Collections</h1><h2 id="defaultdict"><a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h2><p>在Python中如果访问字典中不存在的键, 会引发KeyError异常, 但是有时候, 字典中的每个键都存在默认值是非常方便的</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化说明:</p><ul><li>当不传入参数时,可以其看作一个普通字典</li><li>可接受一个类型作为参数, 当访问的键不存在时, 它会实例化该类作为默认值</li><li>也可以接受任何不带参数的可调用函数作为参数, 它会把函数的返回结果作为默认值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 传入一个list类型</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(list)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd</span><br><span class="line">defaultdict(&lt;type <span class="string">'list'</span>&gt;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入一个不带参数的可调用函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">zero</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd = defaultdict(zero)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd</span><br><span class="line">defaultdict(&lt;function zero at <span class="number">0xb7ed2684</span>&gt;, &#123;&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd[<span class="string">'foo'</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dd</span><br><span class="line">defaultdict(&lt;function zero at <span class="number">0xb7ed2684</span>&gt;, &#123;<span class="string">'foo'</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用collections.defaultdict来解决最初的单词统计问题</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">strings = (<span class="string">'puppy'</span>, <span class="string">'kitten'</span>, <span class="string">'puppy'</span>, <span class="string">'puppy'</span>,</span><br><span class="line">           <span class="string">'weasel'</span>, <span class="string">'puppy'</span>, <span class="string">'kitten'</span>, <span class="string">'puppy'</span>)</span><br><span class="line">counts = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)  <span class="comment"># 使用lambda来定义简单的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">    counts[s] += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Collections&quot;&gt;&lt;a href=&quot;#Python-Collections&quot; class=&quot;headerlink&quot; title=&quot;Python Collections&quot;&gt;&lt;/a&gt;Python Collections&lt;/h1&gt;&lt;h2 id=&quot;d
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Pathlib</title>
    <link href="http://www.superli.tech/Pathlib/"/>
    <id>http://www.superli.tech/Pathlib/</id>
    <published>2018-08-01T03:11:11.000Z</published>
    <updated>2018-10-19T01:03:37.189Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Pathlib-Easystart"><a href="#Python-Pathlib-Easystart" class="headerlink" title="Python Pathlib Easystart"></a>Python Pathlib Easystart</h1><p>这个模块提供了表示文件系统路径的类，以面向对象的方式来操作我们的路径,它们的语义适用于不同的操作系统</p><p>路径类分为:</p><ul><li>pure paths: 纯路径(提供不含I/O的纯计算操作)</li><li>concrete paths: 混合路径(继承自纯路径，提供I/O操作)</li></ul><p>继承关系:</p><p><img src="https://docs.python.org/3.6/_images/pathlib-inheritance.png" alt="继承关系图"></p><p><strong>注意几点</strong>:</p><ul><li>pathlib.Path 会根据不同的使用平台实例化成不同的Path, Windows下为WindowsPath, Linux下为PosixPath</li><li>pathlib.Path 是一个 concrete path</li><li>所以我们只需要掌握 <em>pathlib.Path</em> 就能解决我们大部分的需要了</li></ul><h2 id="Quickly-Start"><a href="#Quickly-Start" class="headerlink" title="Quickly Start"></a>Quickly Start</h2><h3 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="comment"># pathlib.Path(*pathsegments)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一, 不传参数则代表当前目录"."</span></span><br><span class="line">path = Path()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">path = Path(<span class="string">"test.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三(相对路径)</span></span><br><span class="line">path = Path(Path(<span class="string">"A"</span>), <span class="string">"B"</span>, <span class="string">"C/D"</span>, <span class="string">"test.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法四(绝对路径), 略</span></span><br></pre></td></tr></table></figure><h3 id="斜线操作"><a href="#斜线操作" class="headerlink" title="斜线操作"></a>斜线操作</h3><p>类似于 os.path.join()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">path = Path(<span class="string">"/A"</span>)</span><br><span class="line">new_path = path / B / C</span><br></pre></td></tr></table></figure><h3 id="常用属性和方法"><a href="#常用属性和方法" class="headerlink" title="常用属性和方法"></a>常用属性和方法</h3><h4 id="Path-parents-Path-parent"><a href="#Path-parents-Path-parent" class="headerlink" title="Path.parents / Path.parent"></a>Path.parents / Path.parent</h4><p>返回父节点列表 / 父节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父节点们</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = PureWindowsPath(<span class="string">'c:/foo/bar/setup.py'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.parents[<span class="number">0</span>]</span><br><span class="line">PureWindowsPath(<span class="string">'c:/foo/bar'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.parents[<span class="number">1</span>]</span><br><span class="line">PureWindowsPath(<span class="string">'c:/foo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.parents[<span class="number">2</span>]</span><br><span class="line">PureWindowsPath(<span class="string">'c:/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 父节点</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = PurePosixPath(<span class="string">'/a/b/c/d'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.parent</span><br><span class="line">PurePosixPath(<span class="string">'/a/b/c'</span>)</span><br></pre></td></tr></table></figure><h4 id="Path-cwd"><a href="#Path-cwd" class="headerlink" title="Path.cwd()"></a>Path.cwd()</h4><p>返回当前目录</p><h4 id="Path-stat"><a href="#Path-stat" class="headerlink" title="Path.stat()"></a>Path.stat()</h4><p>返回当前Path的具体信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path(<span class="string">'setup.py'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.stat().st_size</span><br><span class="line"><span class="number">956</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.stat().st_mtime</span><br><span class="line"><span class="number">1327883547.852554</span></span><br></pre></td></tr></table></figure><h4 id="Path-exists"><a href="#Path-exists" class="headerlink" title="Path.exists()"></a>Path.exists()</h4><p>判断文件/文件夹是否存在</p><h4 id="Path-is-dir"><a href="#Path-is-dir" class="headerlink" title="Path.is_dir()"></a>Path.is_dir()</h4><p>判断是否是文件夹</p><h4 id="Path-is-file"><a href="#Path-is-file" class="headerlink" title="Path.is_file()"></a>Path.is_file()</h4><p>判断是否是文件</p><h4 id="Path-glob-pattern"><a href="#Path-glob-pattern" class="headerlink" title="Path.glob(pattern)"></a>Path.glob(pattern)</h4><p>在给定目录里,匹配需要的文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(Path(<span class="string">'.'</span>).glob(<span class="string">'*.py'</span>))</span><br><span class="line">[PosixPath(<span class="string">'pathlib.py'</span>), PosixPath(<span class="string">'setup.py'</span>), PosixPath(<span class="string">'test_pathlib.py'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(Path(<span class="string">'.'</span>).glob(<span class="string">'*/*.py'</span>))</span><br><span class="line">[PosixPath(<span class="string">'docs/conf.py'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配模式 ** 表示递归匹配</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(Path(<span class="string">'.'</span>).glob(<span class="string">'**/*.py'</span>))</span><br><span class="line">[PosixPath(<span class="string">'build/lib/pathlib.py'</span>),</span><br><span class="line"> PosixPath(<span class="string">'docs/conf.py'</span>),</span><br><span class="line"> PosixPath(<span class="string">'pathlib.py'</span>),</span><br><span class="line"> PosixPath(<span class="string">'setup.py'</span>),</span><br><span class="line"> PosixPath(<span class="string">'test_pathlib.py'</span>)]</span><br></pre></td></tr></table></figure><h4 id="Path-iterdir"><a href="#Path-iterdir" class="headerlink" title="Path.iterdir()"></a>Path.iterdir()</h4><p>当path指向一个目录时,迭代返回目录的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path(<span class="string">'docs'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> child <span class="keyword">in</span> p.iterdir(): child</span><br><span class="line">...</span><br><span class="line">PosixPath(<span class="string">'docs/conf.py'</span>)</span><br><span class="line">PosixPath(<span class="string">'docs/_templates'</span>)</span><br><span class="line">PosixPath(<span class="string">'docs/make.bat'</span>)</span><br><span class="line">PosixPath(<span class="string">'docs/index.rst'</span>)</span><br><span class="line">PosixPath(<span class="string">'docs/_build'</span>)</span><br><span class="line">PosixPath(<span class="string">'docs/_static'</span>)</span><br><span class="line">PosixPath(<span class="string">'docs/Makefile'</span>)</span><br></pre></td></tr></table></figure><h4 id="Path-write-bytes-data-Path-read-bytes"><a href="#Path-write-bytes-data-Path-read-bytes" class="headerlink" title="Path.write_bytes(data) / Path.read_bytes()"></a>Path.write_bytes(data) / Path.read_bytes()</h4><p>以二进制形式存储和读取文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path(<span class="string">'my_binary_file'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.write_bytes(<span class="string">b'Binary file contents'</span>)</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.read_bytes()</span><br><span class="line"><span class="string">b'Binary file contents'</span></span><br></pre></td></tr></table></figure><h4 id="Path-write-text-data-encoding-None-errors-None"><a href="#Path-write-text-data-encoding-None-errors-None" class="headerlink" title="Path.write_text(data, encoding=None, errors=None)"></a>Path.write_text(data, encoding=None, errors=None)</h4><p>打开文件以指定编码写入数据并关闭</p><h4 id="Path-read-text-encoding-None-errors-None"><a href="#Path-read-text-encoding-None-errors-None" class="headerlink" title="Path.read_text(encoding=None, errors=None)"></a>Path.read_text(encoding=None, errors=None)</h4><p>读取指定编码文件的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Path(<span class="string">'my_text_file'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.write_text(<span class="string">'Text file contents'</span>)</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.read_text()</span><br><span class="line"><span class="string">'Text file contents'</span></span><br></pre></td></tr></table></figure><p><a href="https://docs.python.org/3/library/pathlib.html" target="_blank" rel="noopener">docs.python.org</a><br>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-Pathlib-Easystart&quot;&gt;&lt;a href=&quot;#Python-Pathlib-Easystart&quot; class=&quot;headerlink&quot; title=&quot;Python Pathlib Easystart&quot;&gt;&lt;/a&gt;Python Pathlib
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>github简单入门</title>
    <link href="http://www.superli.tech/Github%E5%85%A5%E9%97%A8%E6%95%99%E5%AD%A6/"/>
    <id>http://www.superli.tech/Github入门教学/</id>
    <published>2018-07-27T08:43:41.000Z</published>
    <updated>2018-08-23T11:16:09.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-GitHub-Briefer-Course"><a href="#Git-GitHub-Briefer-Course" class="headerlink" title="Git_GitHub Briefer Course"></a>Git_GitHub Briefer Course</h1><blockquote><p>教程源于<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Here</a>,以下是自己的整理</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>Win10环境下:</strong><br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">猛击这里下载</a>安装包,默认选项安装,安装完成后,右键菜单出现下图标识表示安装成功!</p><h2 id="初次使用的配置"><a href="#初次使用的配置" class="headerlink" title="初次使用的配置"></a>初次使用的配置</h2><p>打开<em>Git Bash</em>命令窗口输入:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><h2 id="Git具体食用方法步骤"><a href="#Git具体食用方法步骤" class="headerlink" title="Git具体食用方法步骤"></a>Git具体食用方法步骤</h2><p><strong>初始化Git仓库</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><strong>添加文件到Git仓库，分两步：</strong>:</p><ol><li>把需要提交的文件先放入缓存区</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt; <span class="comment">#注意，可反复多次使用，添加多个文件；</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用提交命令</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="comment">#完成提交</span></span><br></pre></td></tr></table></figure><p><strong>查看工作区的状态</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>如果git status告诉你有文件被修改过，使用下面代码可以查看修改内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>查看工作区和版本库里面最新版本的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD -- filename</span><br></pre></td></tr></table></figure><p><strong>时光穿梭</strong>:</p><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure><p>查看提交历史</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>查看命令历史</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>丢弃工作区的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>该命令意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li>readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li>readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ul><p>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>如果已经提交到缓存区,就需要先把文件从缓存区撤下来:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><p>然后再执行上一步:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>或者还可以(前提是没有把文件推送到远程git仓库):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>再reset回去:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commit_id</span><br></pre></td></tr></table></figure><p><strong>文件删除</strong>:</p><p>首先删除工作区文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm test.txt</span><br></pre></td></tr></table></figure><p>此时两种情况:</p><ul><li>确实要删除此文件,则执行:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm <span class="string">'test.txt'</span></span><br><span class="line">$ git commit -m <span class="string">"remove test.txt"</span></span><br></pre></td></tr></table></figure><ul><li>发现删错了?没关系,可以从版本库回复到最后一次提交上去的修改</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- test.txt</span><br></pre></td></tr></table></figure><h2 id="GitHub具体食用方法步骤"><a href="#GitHub具体食用方法步骤" class="headerlink" title="GitHub具体食用方法步骤"></a>GitHub具体食用方法步骤</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><ol><li>首先你得注册自己的GitHub账号(<a href="https://github.com/" target="_blank" rel="noopener">猛击这里注册</a>)</li><li>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要如下设置：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span> <span class="comment">#填写自己的邮箱,然后一路回车就可以</span></span><br></pre></td></tr></table></figure><ol start="3"><li>在用户主目录里找到.ssh目录,里面有<strong>id_rsa</strong>和<strong>id_rsa.pub</strong>两个文件,登录GitHub,找到settings里面SSH Keys页面把<strong>id_rsa.pub</strong>里面的内容添加进去</li></ol><h3 id="GitHub食用阶段"><a href="#GitHub食用阶段" class="headerlink" title="GitHub食用阶段"></a>GitHub食用阶段</h3><p><strong>关联一个远程库</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure><p>取消关联:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin git@server-name:path/repo-name.git</span><br></pre></td></tr></table></figure><p><strong>第一次推送master分支的所有内容</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>此后每次推送:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><strong>远程库的克隆</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:michaelliao/gitskills.git</span><br></pre></td></tr></table></figure><p><strong>分支的操作</strong>:</p><p>查看分支:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>创建分支：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;name&gt;</span><br></pre></td></tr></table></figure><p>切换分支：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;name&gt;</span><br></pre></td></tr></table></figure><p>创建+切换分支：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b &lt;name&gt;</span><br></pre></td></tr></table></figure><p>合并某分支到当前分支：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;name&gt;</span><br></pre></td></tr></table></figure><p>删除分支：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><p>查看分支合并情况:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><p><strong>多人协作</strong>:</p><p>查看远程库的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>显示更详细的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>推送分支</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>创建远程origin的dev分支到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev origin/dev</span><br></pre></td></tr></table></figure><p><strong>多人协作小结</strong>:</p><ul><li>查看远程库信息，使用<strong>git remote -v</strong>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<strong>git push origin branch-name</strong>，如果推送失败，先用git pull抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<strong>git checkout -b branch-name origin/branch-name</strong>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<strong>git branch –set-upstream branch-name origin/branch-name</strong>；</li><li>从远程抓取分支，使用<strong>git pull</strong>，如果有冲突，要先处理冲突。</li></ul><p><strong>.gitignore文件说明</strong>:</p><p>在使用git时,它默认会把所有文件添加到版本控制器中,但是在实践中我们可能会遇到有的文件不需要添加到版控制当中,比如vscode编译时产生的.vscode文件我们不希望它被上传到GitHub上面,涉及到保密的.xlsx文件等等,这时候你可能就需要一个.gitignore文件来达到目的</p><ul><li>规则<ul><li>空白或者以#开始的文字将被忽略, 比如注释一行可以用 #</li><li>可以使用通配符,例如 *</li><li>使用 / 结束可以匹配文件夹,例如 doc/ 将匹配doc文件夹</li><li>使用 ! 来声明一个非语句. 比如 !doc.txt 将不会忽略doc.txt文件</li></ul></li></ul><p><a href="https://www.cnblogs.com/langtianya/p/5748885.html" target="_blank" rel="noopener">猛击这里获取更多</a></p><blockquote><p>未完待续…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-GitHub-Briefer-Course&quot;&gt;&lt;a href=&quot;#Git-GitHub-Briefer-Course&quot; class=&quot;headerlink&quot; title=&quot;Git_GitHub Briefer Course&quot;&gt;&lt;/a&gt;Git_GitHub 
      
    
    </summary>
    
      <category term="Git" scheme="http://www.superli.tech/categories/Git/"/>
    
    
      <category term="Git" scheme="http://www.superli.tech/tags/Git/"/>
    
      <category term="Github" scheme="http://www.superli.tech/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Python里包、库、模块的区别</title>
    <link href="http://www.superli.tech/Python%E9%87%8C%E5%BA%93%E3%80%81%E5%8C%85%E3%80%81%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.superli.tech/Python里库、包、模块的区别/</id>
    <published>2018-07-27T01:59:41.000Z</published>
    <updated>2018-10-19T01:04:28.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python里包、库、模块的区别"><a href="#Python里包、库、模块的区别" class="headerlink" title="Python里包、库、模块的区别"></a>Python里包、库、模块的区别</h1><h2 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h2><p>包是一个有层次的文件目录结构，它定义了由n个模块或n个子包组成的python应用程序执行环境</p><p>通俗一点：包是一个包含<strong>init</strong>.py 文件的目录，该目录下一定得有这个<strong>init</strong>.py文件和其它模块或子包</p><h2 id="库-lib"><a href="#库-lib" class="headerlink" title="库(lib)"></a>库(lib)</h2><p>参考其它编程语言的说法，就是指python中的完成一定功能的代码集合，供用户使用的代码组合,在python中是包和模块的形式</p><h2 id="模块-module"><a href="#模块-module" class="headerlink" title="模块(module)"></a>模块(module)</h2><p>自我包含并且有组织的代码片段为模块。可以理解为module，一个 <strong>.py</strong> 文件就是个 module</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python里包、库、模块的区别&quot;&gt;&lt;a href=&quot;#Python里包、库、模块的区别&quot; class=&quot;headerlink&quot; title=&quot;Python里包、库、模块的区别&quot;&gt;&lt;/a&gt;Python里包、库、模块的区别&lt;/h1&gt;&lt;h2 id=&quot;包-package
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python Unittest</title>
    <link href="http://www.superli.tech/Unittest/"/>
    <id>http://www.superli.tech/Unittest/</id>
    <published>2018-07-23T11:08:15.000Z</published>
    <updated>2018-10-19T01:09:54.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-UnitTest-Briefer-Course"><a href="#Python-UnitTest-Briefer-Course" class="headerlink" title="Python UnitTest Briefer Course"></a>Python UnitTest Briefer Course</h1><blockquote><p>梳理理念: WWH = What + Why + How</p></blockquote><h2 id="什么是UnitTest"><a href="#什么是UnitTest" class="headerlink" title="什么是UnitTest"></a>什么是UnitTest</h2><p>UnitTest是Python内部已有的一个单元测试模块,也叫pyUnit</p><blockquote><p><a href="https://baike.baidu.com/item/单元测试/1917084?fr=aladdin" target="_blank" rel="noopener">单元测试(猛击这里获取更多):</a>对软件中的最小可测试单元进行检查和验证</p></blockquote><blockquote><p><strong>作用</strong>:用于检验被测代码的一个很小的、很明确的功能是否正确</p></blockquote><h2 id="为什么需要单元测试"><a href="#为什么需要单元测试" class="headerlink" title="为什么需要单元测试"></a>为什么需要单元测试</h2><p>如果我们对某个函数/模块代码做了修改,只要通过简单的跑一遍单元测试,就能知道这次修改有没有对原有函数行为产生影响,这样就能确保一个程序模块的行为符合我们设计的测试用例,可以保证该函数/模块仍然是正确的</p><h2 id="怎么食用"><a href="#怎么食用" class="headerlink" title="怎么食用"></a>怎么食用</h2><p><a href="https://docs.python.org/3.6/library/unittest.html" target="_blank" rel="noopener">官方技术文档(猛击这里获取更多)</a></p><p><strong>理解下面4个重要概念</strong>(就能完成日常大部分测试需求)</p><blockquote><p>分别是 Test Fixture,Test Case,Test Suite,Test Runner</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ul><li>TestCase: 测试用例,一个TestCase的实例就是一个完整的测试流程,包括测试前的准备(setUp),测试的执行(run),测试后的回调(tearDown),通过运行这个测试单元可以对某一个问题进行验证</li><li>TestSuite: 很多TestCase的整合,而且本身能嵌套</li><li>TextTestRunner: 执行测试用例</li><li>Test Fixture:对一个测试用例的搭建和销毁就是Test Fixture,换句话说就是重写TestCase里面setUp()和tearDown()方法就是一个Test Fixture</li></ul><p><strong>概念补充</strong>:</p><ul><li>TestLoader: 把TestCase加载到TestSuite中,返回一个TestSuite实例</li><li>TextTestResult: 测试结果会储存在这个实例里(包括测试了多少用例,成功、失败了多少等等信息)</li></ul><h4 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h4><ol><li>import unittest</li><li>定义一个继承自unittest.TestCase的测试用例类</li><li>定义setUp()和tearDown()方法，在每个测试用例前后做一些辅助工作</li><li>定义测试用例，名字必须以test开头  </li><li>一个测试用例应该只测试一个方面，测试目的和测试内容应很明确,主要是调用assertEqual、assertRaises等断言方法判断程序执行结果和预期值是否相符 </li><li>调用unittest.main()启动测试  </li><li>如果测试未通过，会输出相应的错误提示。如果测试全部通过则不显示任何东西</li></ol><h4 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h4><p><strong>一个简单测试实例的创建</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先导入unittest模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="string">'''定义一个继承自unittest.TestCase的测试用例类'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义setUp()和tearDown()方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例前执行'''</span></span><br><span class="line">    print(<span class="string">"Case Before"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例执行后'''</span></span><br><span class="line">    print(<span class="string">"Case After"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义测试用例，名字必须以test开头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例1'''</span></span><br><span class="line">    num_a = <span class="number">1</span></span><br><span class="line">    num_b = <span class="number">2</span></span><br><span class="line">    self.assertEqual(num_a+num_b, <span class="number">3</span>, <span class="string">'结果错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case2</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例2'''</span></span><br><span class="line">    num_a = <span class="number">3</span></span><br><span class="line">    num_b = <span class="number">4</span></span><br><span class="line">    self.assertEqual(num_a*num_b, <span class="number">10</span>, <span class="string">'结果错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p><strong>Suite管理多个测试实例:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先导入unittest模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="string">'''定义一个继承自unittest.TestCase的测试用例类'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义setUp()和tearDown()方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例前执行'''</span></span><br><span class="line">    print(<span class="string">"Case Before"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例执行后'''</span></span><br><span class="line">    print(<span class="string">"Case After"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义测试用例，名字必须以test开头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例1'''</span></span><br><span class="line">    num_a = <span class="number">1</span></span><br><span class="line">    num_b = <span class="number">2</span></span><br><span class="line">    self.assertEqual(num_a+num_b, <span class="number">3</span>, <span class="string">'结果错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case2</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例2'''</span></span><br><span class="line">    num_a = <span class="number">3</span></span><br><span class="line">    num_b = <span class="number">4</span></span><br><span class="line">    self.assertEqual(num_a*num_b, <span class="number">10</span>, <span class="string">'结果错误'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个测试集合(Suite),并添加测试实例(Case)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite</span><span class="params">()</span>:</span></span><br><span class="line"><span class="string">'''这是一个测试集合'''</span></span><br><span class="line">suite_test = unittest.TestSuite()</span><br><span class="line">suite_test.addTest(Test01(<span class="string">"test_case1"</span>))</span><br><span class="line">suite_test.addTest(Test01(<span class="string">"test_case2"</span>))</span><br><span class="line"><span class="keyword">return</span> suite_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">RUNNER = unittest.TextTestRunner()</span><br><span class="line">RUNNER.run(suite())</span><br><span class="line"></span><br><span class="line"><span class="comment">#if __name__ == "__main__":</span></span><br><span class="line"><span class="comment">#   unittest.main(defaultTest='suite')</span></span><br></pre></td></tr></table></figure><p><strong>Suite分组管理:</strong></p><p>文件目录:</p><p><img src="https://github.com/Easy318/MyPicture/blob/master/VS%20Code/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95.png?raw=true" alt="图片"></p><p><em>Case模块</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先导入unittest模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"><span class="string">'''定义一个继承自unittest.TestCase的测试用例类'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义setUp()和tearDown()方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setUp</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例前执行'''</span></span><br><span class="line">    print(<span class="string">"Case Before"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tearDown</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例执行后'''</span></span><br><span class="line">    print(<span class="string">"Case After"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义测试用例，名字必须以test开头</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case1</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例1'''</span></span><br><span class="line">    print(<span class="string">"test_case1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case2</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例2'''</span></span><br><span class="line">    print(<span class="string">"test_case2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case3</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例3'''</span></span><br><span class="line">    print(<span class="string">"test_case3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_case4</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">'''测试用例4'''</span></span><br><span class="line">    print(<span class="string">"test_case4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p><em>suite模块</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首先导入unittest模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> cases_data <span class="keyword">import</span> Test01</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义测试集合(Suite),并添加测试实例(Case)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一类测试集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''这是一个测试集合'''</span></span><br><span class="line">    suite_test = unittest.TestSuite()</span><br><span class="line">    suite_test.addTest(Test01(<span class="string">"test_case1"</span>))</span><br><span class="line">    suite_test.addTest(Test01(<span class="string">"test_case2"</span>))</span><br><span class="line">    <span class="keyword">return</span> suite_test</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二类测试集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">suite2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''这是一个测试集合'''</span></span><br><span class="line">    suite_test = unittest.TestSuite()</span><br><span class="line">    suite_test.addTest(Test01(<span class="string">"test_case3"</span>))</span><br><span class="line">    suite_test.addTest(Test01(<span class="string">"test_case4"</span>))</span><br><span class="line">    <span class="keyword">return</span> suite_test</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个管理所有测试集合的集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all_suite</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''集合的集合'''</span></span><br><span class="line">    all_test = unittest.TestSuite((suite1(), suite2()))</span><br><span class="line">    <span class="keyword">return</span> all_test</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动总测试集合</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    RUNNER = unittest.TextTestRunner()</span><br><span class="line">    RUNNER.run(all_suite())</span><br></pre></td></tr></table></figure><p><em>所有测试开始前只执行一次总配置,结束时也一样</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#首先导入unittest模块</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test01</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line">    <span class="string">'''定义一个继承自unittest.TestCase的测试用例类'''</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setUpClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"all test only one sets"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tearDownClass</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'tearDownClass'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_01</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"This is a testcase.."</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-UnitTest-Briefer-Course&quot;&gt;&lt;a href=&quot;#Python-UnitTest-Briefer-Course&quot; class=&quot;headerlink&quot; title=&quot;Python UnitTest Briefer Course&quot;&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://www.superli.tech/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.superli.tech/tags/Python/"/>
    
  </entry>
  
</feed>
